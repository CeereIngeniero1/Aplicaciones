const puppeteer = require('puppeteer');
const fs = require('fs');
const { Console } = require('console');
const { keyboard, mouse, Key, clipboard } = require('@nut-tree-fork/nut-js');

const os = require('os');
const NombreEquipo = os.hostname();
const EquiposGenerales = {
    'HPGRIS': "EQUIPO CREADOR",
    'DESKTOP-6JICI9S': "ASUS OLD",
    'DESKTOP-SNSPTLM': "DELLC3",
    'LAPTOP-2VU2EBUO': "EQUIPO VALEN",
    'HPRED240': "FER EQUIPO",
    'LAPTOP-JL0BL28F': "JORGE EQUIPO",
    'MERCADEO': "MERCADEO",
    'DESKTOP-RF3NUO3': "PIXEL",
    'HPRED241':"FERCHO ingeniero en sistemas best"
}


const EquipoActual = EquiposGenerales[NombreEquipo];
// Actualizado
var Empresa = 'Miranda';
var user1 = '56679';
var pass1 = 'MSAColombia2024*';
var user2 = '88860';
var pass2 = 'Carlosp2025*';
var Agente = 1;
var EnviarCorreosParaPestanas = 0;
var contreapertura = 0;
var ContadorVueltas = 0;
var contComasceldas = 0;
var Cag = false;
var Caggrande = false;
Pagina();
async function Pagina() {
    var Pines = fs.readFileSync('Pin.txt', 'utf-8', prueba = (error, datos) => {
        if (error) {
            throw error;
        } else {
            console.log(datos);
        }
    });
    for (let i = 0; i < Pines.length; i++) {
        if (Pines.substring(i + 1, i + 4) == 'Co:') {
            console.log(Pines.substring(i + 1, i + 4));
            Pin = Pines.substring(i + 4, i + 31);
            break
        }
    }



    const pathToExtension = 'C:\\Aplicaciones\\Exte\\0.2.1_0';


    const browser = await puppeteer.launch({
        //executablePath: 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
        executablePath: "C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe",
        // Reemplaza con la ruta real a tu Google Chrome
        headless: false,
        args: ['--start-maximized',
            `--disable-extensions-except=${pathToExtension}`,
            `--load-extension=${pathToExtension}`
        ],
        devtools: false
    });

        Mineria(browser, Pin);

}




function Mineria(browser,  Pin) {
    (async () => {

        console.log("Esta es la vuelta " + ContadorVueltas);
        const page = await browser.newPage();

        let Primerpaso = setTimeout(() => {
            console.log("ENTRO EN EL PRIMERPASO")

            page.close();
            Mineria(browser,  Pin);

        }, 20000);





        await page.setViewport({ width: 1368, height: 620 });
        await page.goto('https://annamineria.anm.gov.co/sigm/');

        let user = (Agente == 0) ? user1 : user2;
        let pass = (Agente == 0) ? pass1 : pass2;

            try {

                console.log(user);
                console.log(pass);
                await page.type('#username', user);
                await page.type('#password', pass);

                page.click("#loginButton");


            } catch (ex) {
                console.log("Entro en el catch");
            }

        page.setDefaultTimeout(0);
        try {
            await page.waitForNavigation({
                waitUntil: 'networkidle0',
                timeout: 5000 // 5 segundos en milisegundos
            });
        } catch (error) {
            if (error instanceof puppeteer.errors.TimeoutError) {
                console.log('La navegación tardó más de 5 segundos.');
                // Aquí puedes manejar la situación cuando se supera el tiempo de espera
            } else {
                throw error; // Lanzar el error si no es un TimeoutError
            }
        }
        validador = 0;
        clearTimeout(Primerpaso);
        let Segundopaso = setTimeout(() => {
            console.log("ENTRO EN EL Segundopaso")
            page.close();
            Mineria(browser,  Pin);
        }, 35000);





        const solicitudes = await page.$x('//span[contains(.,"Solicitudes")]');
        await solicitudes[1].click();

        const lblRadicar = await page.$x('//a[contains(.,"Radicar solicitud de propuesta de contrato de concesión")]');
        await lblRadicar[0].click();
        if (Agente == 1) {
            await page.waitForTimeout(2000);


            //await page.evaluate(() => document.getElementById("submitterPersonOrganizationNameId").value = "")
            await page.evaluate(() => document.getElementById("submitterPersonOrganizationNameId").value = "");

            //await page.waitForSelector('select[id="submitterPersonOrganizationNameId"]');
            //const Agente = await page.$('select[id=" submitterPersonOrganizationNameId"]');

            await page.type('#submitterPersonOrganizationNameId', '56679');
            //await page.type('#submitterPersonOrganizationNameId', '');

            await page.waitForTimeout(3000);

            await page.keyboard.press("Enter");

            await page.waitForTimeout(550);
        }



        await page.waitForTimeout(2500)
        page.setDefaultTimeout(0);
        await page.waitForSelector('select[id="pinSlctId"]');
        const selectPin = await page.$('select[id="pinSlctId"]');
        await selectPin.type(Pin);
        console.log(Pin);

        /* VALIDAR SI EL PIN ESTÁ PRÓXIMO A VENCERSE */
            // Capturar todas las opciones de un select
            const allOptions = await page.evaluate(select => {
                const options = Array.from(select.options); // Convierte las opciones a un array
                return options.map(option => option.textContent); // Retorna un array con el texto de cada opción
            }, selectPin);

            console.log('Todas las opciones:', allOptions);

            const closestDateOption = await page.evaluate(() => {
                const select = document.querySelector('select');

                const monthMap = {
                    "ENE": "01",
                    "FEB": "02",
                    "MAR": "03",
                    "ABR": "04",
                    "MAY": "05",
                    "JUN": "06",
                    "JUL": "07",
                    "AGO": "08",
                    "SEP": "09",
                    "OCT": "10",
                    "NOV": "11",
                    "DIC": "12"
                };

                const options = Array.from(select.options).map(option => {
                    const text = option.textContent; // Ejemplo: "20241108074024, 08/DIC/2024"
                    const dateText = text.split(', ')[1]; // Extraer la fecha: "08/DIC/2024"

                    const [day, monthName, year] = dateText.split('/');
                    const month = monthMap[monthName];
                    const formattedDate = new Date(`${year}-${month}-${day}`);

                    return { text, date: formattedDate };
                });

                const now = new Date();

                const differences = options.map(option => {
                    const diff = Math.abs(option.date - now);
                    return { text: option.text, diff }; // Retornar la diferencia y el texto
                });

                console.log('Diferencias calculadas:', differences);

                // Reducir para encontrar la fecha más cercana
                const closest = options.reduce((prev, curr) => {
                    return (Math.abs(curr.date - now) < Math.abs(prev.date - now)) ? curr : prev;
                });

                return closest.text;
            });

            console.log('Opción más cercana a la fecha actual:', closestDateOption);
            const input = closestDateOption;
        /* FIN => VALIDACIÓN SI EL PIN ESTÁ PRÓXIMO A VENCERSE */

        await page.waitForXPath('//span[contains(.,"Continuar")]');
        const continPin = await page.$x('//span[contains(.,"Continuar")]');
        await continPin[1].click();
        await page.waitForTimeout(1000);

        const Fallopin = await page.$$eval("span", links =>

            links.map(link => link.textContent)
        );
        console.log(Fallopin[44]);
        var cont = 1;
        for (let i = 0; i < Fallopin.length; i++) {
            const elemento = Fallopin[i];
            //console.log("Este es el " + i + " " + Fallopin[i]);
            if (elemento == "Vea los errores a continuación:") {
                cont = 0;
            }

        }
        console.log(cont);
        if (cont == "0") {
            page.setDefaultTimeout(0);
            await page.waitForSelector('select[id="pinSlctId"]');
            const selectPin = await page.$('select[id="pinSlctId"]');
            await selectPin.type(Pin);

            await page.waitForXPath('//span[contains(.,"Continuar")]');
            const continPin = await page.$x('//span[contains(.,"Continuar")]');
            await continPin[1].click();
            /*
                        //await page.waitForTimeout(1000)
                        Primero();

                        browser.close();*/

        }

        /*await page.waitForNavigation({
           waitUntil: 'networkidle0',
       });*/

        if (await page.$x('//span[contains(.,"Vea los errores a continuación:")]').lenght > 0) {
            console.log('no pasó el pin');
            await page.waitForSelector('select[id="pinSlctId"]');
            const selectPin = await page.$('select[id="pinSlctId"]');
            await selectPin.type(Pin);

            const continPin = await page.$x('//span[contains(.,"Continuar")]');
            await continPin[1].click();
        }
        else if (await page.$x('//span[contains(.,"Vea los errores a continuación:")]').lenght == 0) {
            console.log('pasó el pin, hurra!');
        }






        await page.waitForSelector('button[ng-class="settings.buttonClasses"]');
        page.evaluate(() => {

            /* SELECCIONAR MINERALES POR NOMBRE */
            document.querySelector('[ng-class="settings.buttonClasses"]').click();

            // SE OBTIENEN LOS ELEMENTOS QUE TIENEN LA CLASE 'ng-binding ng-scope'
            var elementos = document.getElementsByClassName('ng-binding ng-scope');

            let Minerales = ['ORO', 'oro', 'PLATA', 'Plata', 'PLATINO', 'Platino'];
            let elementosConMinerales = [];

            // ITERA SOBRE TODOS LOS ELEMENTOS CON CLASE (ng-binding ng-scope)
            for (let i = 0; i < elementos.length; i++) {
                let elemento = elementos[i];
                let agregarElemento = false;

                // ITERA SOBRE TODOS LOS VALORES DE LA LISTA MINERALES
                for (let c = 0; c < Minerales.length; c++) {

                    // VERIFICA SI EL TEXTO DEL ELEMENTO CONTIENE EXACTAMENTE EL MINERAL EN PROCESO DE LA LISTA DE MINERALES
                    if (elemento.textContent.includes(Minerales[c]) && elemento.textContent.split(/\s+/).includes(Minerales[c])) {
                        agregarElemento = true;
                        break;
                    }
                }

                // SI SE CUMPLE AGREGARELEMENTO === TRUE, SE AGREGA EL ELEMENTO A LA LISTA ELEMENTOSCONMINERALES
                if (agregarElemento) {
                    elementosConMinerales.push(elemento);
                }
            }

            // SE HACE CLIC SOBRE TODOS LOS VALORES CONTENIEDOS EN LA LISTA ELEMENTOSCONMINERALES
            for (let i = 0; i < elementosConMinerales.length; i++) {
                elementosConMinerales[i].click();
            }
            /* FIN FIN FIN */
        });

        clearTimeout(Segundopaso);



        //console.log(Area10);
        var Aviso = 0;
        var contador = 0;
        var Band = 1;
        var IdArea = '';
        var SoloAviso = 0;
        ContadorVueltas++;
        var Comas = 0;
        var Texto = "";
        var liberadas = 0;
        var Celda = 0;

        let ComasTotalesPorArea = {};
      
        while (Band != 99) {

            const Pestanas = await browser.pages();
            console.log(`HAY ${Pestanas.length} PESTAÑAS ABIERTAS`);
            if (Pestanas.length >= 4) {
                EnviarCorreosParaPestanas++;
                if (EnviarCorreosParaPestanas <= 2) {
                    // Se realiza envío de correo para alertar
                    Correo(5, '', '');
                }
            }

            // VerificarVencimientoPin(selectedText, input);
            VerificarVencimientoPin(closestDateOption, input);

            console.log("Inicia el timer");
            let TimeArea = setTimeout(() => {
                console.log("ENTRO EN EL TimeArea");
                page.close();
                Mineria(browser,  Pin);
            }, 25000);

            const selectArea = await page.$('select[name="areaOfConcessionSlct"]');
            await selectArea.type('Otro tipo de terreno');


            const continDetallesdelArea = await page.$x('//a[contains(.,"área")]');
            await continDetallesdelArea[4].click();

            const selectporCeldas = await page.$('select[id="selectedCellInputMethodSlctId"]');
            await selectporCeldas.type('Usando el mapa de selección para dibujar un polígono o ingresar celdas');
            contador++;


            console.log(contador);

            console.log("y este es la bandera = " + Band);
            let DetallesCompletos;
            function MonitorearAreas(IdArea, Aviso, Celda, Area, Comas) {
                //console.log(IdArea, Aviso, Celda, Comas);

                page.evaluate(({ Area }) => {
                    document.querySelector('[id="cellIdsTxtId"]').value = Area.join('');
                    angular.element(document.getElementById('cellIdsTxtId')).triggerHandler('change');
                }, { Area });


                DetallesCompletos = {
                    IdArea: IdArea,
                    Aviso: Aviso,
                    Celda: Celda,
                    Area: Area,
                    Comas: Comas
                }

                return DetallesCompletos;
            }

            // if (Band == 1000) {
            //     MonitorearAreas(
            //         "AreaDePrueba",
            //         1,
            //         "Esto es una celda de prueba",
            //         ["18N05N14M12R"],
            //         0
            //     );
            // }


             if (Band == 1) {
                MonitorearAreas(
                    "B7647005",
                    1,
                    "18N02M16N08I",
                    ['18N02M16N08I, 18N02M16N03T, 18N02M16J23U, 18N02M16J18Z, 18N02M16J13J, 18N02M16J08Z, 18N02M16F13P, 18N02M16F24K, 18N02M16F24A, 18N02M16N04G, 18N02M16J24W, 18N02M16J24B, 18N02M16J14R, 18N02M16J14L, 18N02M16J04W, 18N02M16F24B, 18N02M16F19L, 18N02M16F09G, 18N02M16N04X, 18N02M16N04H, 18N02M16J14C, 18N02M16J09M, 18N02M16F19S, 18N02M16N04I, 18N02M16J19N, 18N02M16J14N, 18N02M16J09D, 18N02M16F19Y, 18N02M16F19I, 18N02M16N04Z, 18N02M16J24U, 18N02M16J24E, 18N02M16J19E, 18N02M16J04U, 18N02M16F24J, 18N02M16F19Z, 18N02M16F09J, 18N02M16F09E, 18N02M16J25Q, 18N02M16J20Q, 18N02M16J20A, 18N02M16J15Q, 18N02M16J15A, 18N02M16F20F, 18N02M16F10Q, 18N02M16J25W, 18N02M16J25L, 18N02M16J15W, 18N02M16J05R, 18N02M16F20R, 18N02M16F20L, 18N02M16F15L, 18N02M16J20C, 18N02M16J15M, 18N02M16J05S, 18N02M16J05M, 18N02M16F20H, 18N02M16F15X, 18N02M16F15S, 18N02M16F10X, 18N02M16F10M, 18N02M16F10C, 18N02M16N05N, 18N02M16J25T, 18N02M16J20Y, 18N02M16J15T, 18N02M16J10I, 18N02M16J05Y, 18N02M16J05I, 18N02M16J05D, 18N02M16F25N, 18N02M16P01K, 18N02M16N05E, 18N02M16J25Z, 18N02M16K21K, 18N02M16K21A, 18N02M16J15J, 18N02M16J10Z, 18N02M16K06Q, 18N02M16K01V, 18N02M16J05U, 18N02M16J05J, 18N02M16F15Z, 18N02M16G11Q, 18N02M16F15P, 18N02M16F15J, 18N02M16G11F, 18N02M16F10U, 18N02M16F10J, 18N02M16P06G, 18N02M16K16W, 18N02M16K01G, 18N02M16G16W, 18N02M16G11R, 18N02M16G06R, 18N02M16P01X, 18N02M16K11X, 18N02M16G21X, 18N02M16G21H, 18N02M16G16H, 18N02M16P06I, 18N02M16K21T, 18N02M16K16D, 18N02M16G16N, 18N02M16G11T, 18N02M16G06Y, 18N02M16P01U, 18N02M16K16P, 18N02M16K11Z, 18N02M16K06P, 18N02M16G21J, 18N02M16G16U, 18N02M16G11J, 18N02M16G06E, 18N02M16P07F, 18N02M16K12F, 18N02M16K07K, 18N02M16K02A, 18N02M16G12V, 18N02M16K22L, 18N02M16K22G, 18N02M16K22B, 18N02M16K17R, 18N02M16K17B, 18N02M16K02L, 18N02M16G22R, 18N02M16G22L, 18N02M16P07C, 18N02M16G22S, 18N02M16K22T, 18N02M16K17Y, 18N02M16K17T, 18N02M16G22T, 18N02M16P07J, 18N02M16K22U, 18N02M16K12Z, 18N02M16G22J, 18N02M16P08F, 18N02M16K23V, 18N02M16K23K, 18N02M16K18K, 18N02M16K18R, 18N02M16K13B, 18N02M16K08R, 18N02M16K03F, 18N02M16K03G, 18N02M16K03B, 18N02M16G23W, 18N02M16G23Q, 18N02M16G23L, 18N02M16G18R, 18N02M16G18B, 18N02M16G13L, 18N02M16G13B, 18N02M16G08R, 18N02M16G08F, 18N02M16P03M, 18N02M16K23S, 18N02M16K13X, 18N02M16G23H, 18N02M16G08M, 18N02M16P03T, 18N02M16K13D, 18N02M16K18Z, 18N02M16K18E, 18N02M16K13J, 18N02M16K13E, 18N02M16K08Z, 18N02M16K08E, 18N02M16K03U, 18N02M16G23Z, 18N02M16K24A, 18N02M16K19K, 18N02M16K14Q, 18N02M16K09A, 18N02M16G24V, 18N02M16G24Q, 18N02M16G19Q, 18N02M16G14Q, 18N02M16G14F, 18N02M16G09F, 18N02M16K19R, 18N02M16G24L, 18N02M16G19R, 18N02M16P09C, 18N02M16K09C, 18N02M16G14C, 18N02M16G09C, 18N02M16P04N, 18N02M16P04D, 18N02M16K24N, 18N02M16K19N, 18N02M16K14N, 18N02M16K09I, 18N02M16K04T, 18N02M16K04N, 18N02M16G19T, 18N02M16G09Y, 18N02M16P04Z, 18N02M16P04P, 18N02M16P04E, 18N02M16K24U, 18N02M16K14Z, 18N02M16K14P, 18N02M16K09U, 18N02M16G24Z, 18N02M16G19U, 18N02M16G19P, 18N02M16G09U, 18N02M16P10A, 18N02M16K25K, 18N02M16K15K, 18N02M16K15F, 18N02M16K10V, 18N02M16G20V, 18N02M16G15V, 18N02M16G15K, 18N02M16G15F, 18N02M16G10F, 18N02M16P10G, 18N02M16P10C, 18N02M16P05L, 18N02M16K25X, 18N02M16K25R, 18N02M16K20W, 18N02M16K15H, 18N02M16K10M, 18N02M16K05C, 18N02M16G25L, 18N02M16G20G, 18N02M16G15L, 18N02M16G15H, 18N02M16G10G, 18N02M16K25I, 18N02M16K25D, 18N02M16K20Y, 18N02M16K15Y, 18N02M16G25Y, 18N02M16G15Y, 18N02M16G15T, 18N02M16G10Y, 18N02M16P05Z, 18N02M16K20Z, 18N02M16K10Z, 18N02M16G25E, 18N02M16G15J, 18N02M16G10E, 18N02M16Q01A, 18N02M16L21V, 18N02M16H11A, 18N02M16H06Q, 18N02M16Q01L, 18N02M16L16R, 18N02M16L11L, 18N02M16L06W, 18N02M16H21W, 18N02M16H21L, 18N02M16H11R, 18N02M16H06W, 18N02M16H06L, 18N02M16Q06H, 18N02M16L21H, 18N02M16L06H, 18N02M16L01X, 18N02M16L01S, 18N02M16H11M, 18N02M16H06H, 18N02M16L16T, 18N02M16H16I, 18N02M16H11I, 18N02M16Q06E, 18N02M16Q01Z, 18N02M16Q01U, 18N02M16L11Z, 18N02M16L11U, 18N02M16L06U, 18N02M16L01J, 18N02M16L22Q, 18N02M16L17Q, 18N02M16L17F, 18N02M16H12F, 18N02M16L17G, 18N02M16L12W, 18N02M16L07R, 18N02M16L02L, 18N02M16L02G, 18N02M16H22W, 18N02M16H07W, 18N02M16Q07I, 18N02M16Q07C, 18N02M16Q07D, 18N02M16L17Y, 18N02M16L17M, 18N02M16L17T, 18N02M16H17N, 18N02M16H17H, 18N02M16H07M, 18N02M16H07C, 18N02M16L22Z, 18N02M16L17P, 18N02M16L12P, 18N02M16H22P, 18N02M16H12P, 18N02M16L03K, 18N02M16H08Q, 18N02M16L13B, 18N02M16L03B, 18N02M16H23B, 18N02M16H13G, 18N02M16L08C, 18N02M16L03H, 18N02M16H23M, 18N02M16H13C, 18N02M16L08N, 18N02M16L18P, 18N02M16L18J, 18N02M16L13J, 18N02M16L08J, 18N02M16L03E, 18N02M16H13E, 18N02M16H08P, 18N02M16L14K, 18N02M16L09Q, 18N02M16H24Q, 18N02M16H14A, 18N02M16L14L, 18N02M16H24B, 18N02M16H09R, 18N02M16L19H, 18N02M16L09M, 18N02M16L04X, 18N02M16L04S, 18N02M16H24M, 18N02M16H19H, 18N02M16L19N, 18N02M16L14N, 18N02M16L14I, 18N02M16L09E, 18N02M16L04T, 18N02M16H24Y, 18N02M16H24P, 18N02M16H19N, 18N02M16H14I, 18N02M16L10V, 18N02M16H25V, 18N02M16H20V, 18N02M16H10A, 18N02M16L15G, 18N02M16H20B, 18N02M16N03Z, 18N02M16J23Y, 18N02M16J23Z, 18N02M16J18P, 18N02M16J13P, 18N02M16J13D, 18N02M16J08N, 18N02M16J03U, 18N02M16F18N, 18N02M16F18I, 18N02M16F13U, 18N02M16F13I, 18N02M16F08E, 18N02M16J24Q, 18N02M16J19Q, 18N02M16J04A, 18N02M16F09V, 18N02M16J24R, 18N02M16J19L, 18N02M16J14G, 18N02M16J04L, 18N02M16J04G, 18N02M16F19G, 18N02M16F09L, 18N02M16N04M, 18N02M16J24S, 18N02M16J24M, 18N02M16J14X, 18N02M16J09H, 18N02M16F14M, 18N02M16N04D, 18N02M16J19T, 18N02M16F24T, 18N02M16F19T, 18N02M16F14Y, 18N02M16F14T, 18N02M16F14N, 18N02M16F09Y, 18N02M16F09N, 18N02M16F09I, 18N02M16F09D, 18N02M16J14Z, 18N02M16J14J, 18N02M16J09P, 18N02M16J09J, 18N02M16F24Z, 18N02M16F24E, 18N02M16F19E, 18N02M16F09U, 18N02M16J25A, 18N02M16J15K, 18N02M16J10F, 18N02M16J05K, 18N02M16F25V, 18N02M16F20V, 18N02M16N10G, 18N02M16J25R, 18N02M16J15R, 18N02M16J05W, 18N02M16F25L, 18N02M16F25G, 18N02M16N10H, 18N02M16J25S, 18N02M16J05X, 18N02M16F25M, 18N02M16F20M, 18N02M16F15H, 18N02M16F15C, 18N02M16J25D, 18N02M16J20N, 18N02M16J15Y, 18N02M16J15D, 18N02M16F25Y, 18N02M16F20Y, 18N02M16F20I, 18N02M16F15D, 18N02M16N10J, 18N02M16N10E, 18N02M16N05P, 18N02M16P01F, 18N02M16K21Q, 18N02M16K16V, 18N02M16K16K, 18N02M16K16F, 18N02M16K06V, 18N02M16K01Q, 18N02M16G16V, 18N02M16F15E, 18N02M16G06Q, 18N02M16G06K, 18N02M16K16R, 18N02M16K06G, 18N02M16G21R, 18N02M16G21G, 18N02M16K01S, 18N02M16K01M, 18N02M16K01H, 18N02M16G16M, 18N02M16G06X, 18N02M16G06S, 18N02M16G06M, 18N02M16P06D, 18N02M16K16Y, 18N02M16K01D, 18N02M16G21T, 18N02M16P06E, 18N02M16P01E, 18N02M16K21J, 18N02M16G21P, 18N02M16K22A, 18N02M16K17F, 18N02M16K07A, 18N02M16G22K, 18N02M16G17K, 18N02M16G17A, 18N02M16G12Q, 18N02M16G07F, 18N02M16P02R, 18N02M16P02G, 18N02M16K12L, 18N02M16K07R, 18N02M16K02B, 18N02M16G22W, 18N02M16P07H, 18N02M16P02X, 18N02M16K12M, 18N02M16K07M, 18N02M16G22X, 18N02M16G22M, 18N02M16G12S, 18N02M16G12M, 18N02M16K22I, 18N02M16K22D, 18N02M16K17D, 18N02M16K12N, 18N02M16K07D, 18N02M16K02D, 18N02M16P02P, 18N02M16K17P, 18N02M16K07Z, 18N02M16K07P, 18N02M16K02E, 18N02M16G22U, 18N02M16G17Z, 18N02M16G17U, 18N02M16G17J, 18N02M16G12E, 18N02M16P03F, 18N02M16K23W, 18N02M16K18V, 18N02M16K18Q, 18N02M16K18A, 18N02M16K13Q, 18N02M16K03V, 18N02M16G23B, 18N02M16G18Q, 18N02M16G18A, 18N02M16G13V, 18N02M16G08Q, 18N02M16K23X, 18N02M16K23M, 18N02M16K13M, 18N02M16K08M, 18N02M16K03H, 18N02M16G18H, 18N02M16G13S, 18N02M16G13C, 18N02M16G08H, 18N02M16P08I, 18N02M16P03D, 18N02M16K23I, 18N02M16K23D, 18N02M16G18Y, 18N02M16G08Y, 18N02M16G08T, 18N02M16G08N, 18N02M16G23J, 18N02M16G13E, 18N02M16K04K, 18N02M16G24F, 18N02M16G19V, 18N02M16G09V, 18N02M16G09A, 18N02M16K24B, 18N02M16K09G, 18N02M16K04R, 18N02M16K04L, 18N02M16K04B, 18N02M16G24R, 18N02M16G19W, 18N02M16G14R, 18N02M16G09G, 18N02M16K14C, 18N02M16K09S, 18N02M16K09H, 18N02M16G24X, 18N02M16G24H, 18N02M16G19X, 18N02M16G14M, 18N02M16P04I, 18N02M16K24I, 18N02M16K19I, 18N02M16K09Y, 18N02M16G24Y, 18N02M16G24T, 18N02M16K09Z, 18N02M16G24U, 18N02M16K25Q, 18N02M16K05F, 18N02M16G25F, 18N02M16G20K, 18N02M16P05X, 18N02M16K25G, 18N02M16K20M, 18N02M16K15W, 18N02M16K15X, 18N02M16K15C, 18N02M16K05L, 18N02M16K05B, 18N02M16G25W, 18N02M16G25R, 18N02M16G25B, 18N02M16G20X, 18N02M16G20S, 18N02M16G20L, 18N02M16G15X, 18N02M16G15C, 18N02M16G10B, 18N02M16K20N, 18N02M16K15N, 18N02M16G25I, 18N02M16G25D, 18N02M16G20D, 18N02M16G10D, 18N02M16P05P, 18N02M16K20E, 18N02M16K15E, 18N02M16K10U, 18N02M16K05U, 18N02M16G25Z, 18N02M16G15Z, 18N02M16Q06F, 18N02M16L11A, 18N02M16L06K, 18N02M16L06A, 18N02M16L01Q, 18N02M16H21Q, 18N02M16H06K, 18N02M16L06R, 18N02M16Q06C, 18N02M16L21X, 18N02M16L21M, 18N02M16H21M, 18N02M16H16M, 18N02M16H11S, 18N02M16H11H, 18N02M16Q06I, 18N02M16Q01I, 18N02M16L21Y, 18N02M16L01D, 18N02M16H21Y, 18N02M16L21Z, 18N02M16L21J, 18N02M16L06J, 18N02M16L01P, 18N02M16H06Z, 18N02M16L22K, 18N02M16L22A, 18N02M16L12K, 18N02M16L07A, 18N02M16L02F, 18N02M16H17Q, 18N02M16H12A, 18N02M16H07K, 18N02M16L22L, 18N02M16L22B, 18N02M16L07L, 18N02M16L07B, 18N02M16H22L, 18N02M16H17G, 18N02M16Q02I, 18N02M16L22H, 18N02M16L07X, 18N02M16L07H, 18N02M16L07N, 18N02M16H12Y, 18N02M16H12I, 18N02M16H12C, 18N02M16Q02Z, 18N02M16L02J, 18N02M16H17J, 18N02M16Q08A, 18N02M16Q03F, 18N02M16L23K, 18N02M16L18F, 18N02M16L08F, 18N02M16H18V, 18N02M16H18F, 18N02M16H13K, 18N02M16H13F, 18N02M16L18G, 18N02M16L13L, 18N02M16H23L, 18N02M16H23G, 18N02M16H18L, 18N02M16H08G, 18N02M16L18C, 18N02M16L08X, 18N02M16L03X, 18N02M16H23H, 18N02M16H13H, 18N02M16H08X, 18N02M16H08Y, 18N02M16L13U, 18N02M16L08U, 18N02M16L08P, 18N02M16H08U, 18N02M16L19K, 18N02M16L14F, 18N02M16L09F, 18N02M16L04F, 18N02M16H19V, 18N02M16H14K, 18N02M16H09V, 18N02M16L19L, 18N02M16L04R, 18N02M16H14M, 18N02M16H09X, 18N02M16H09S, 18N02M16L19E, 18N02M16L14U, 18N02M16L14P, 18N02M16L09T, 18N02M16L04I, 18N02M16H24Z, 18N02M16H24T, 18N02M16H24N, 18N02M16H24J, 18N02M16H19J, 18N02M16H19E, 18N02M16H09Y, 18N02M16H14E, 18N02M16H09U, 18N02M16H09D, 18N02M16L05V, 18N02M16L20L, 18N02M16L05W, 18N02M16L05B, 18N02M16H15L, 18N02M16H10R, 18N02M16H10B, 18N02M16N03U, 18N02M16J23T, 18N02M16J18N, 18N02M16J18J, 18N02M16J13Y, 18N02M16J08U, 18N02M16J03T, 18N02M16J03J, 18N02M16J03E, 18N02M16F23T, 18N02M16F23I, 18N02M16F18U, 18N02M16F18P, 18N02M16F18D, 18N02M16F08Y, 18N02M16F08Z, 18N02M16F08N, 18N02M16J19A, 18N02M16J14A, 18N02M16J09Q, 18N02M16J04Q, 18N02M16F24F, 18N02M16F19F, 18N02M16F14F, 18N02M16F09A, 18N02M16J24L, 18N02M16J19B, 18N02M16J09G, 18N02M16J09B, 18N02M16F09B, 18N02M16J19H, 18N02M16J09X, 18N02M16J04C, 18N02M16F19C, 18N02M16F09S, 18N02M16J24D, 18N02M16J19D, 18N02M16J14D, 18N02M16J09Y, 18N02M16J04Y, 18N02M16J04T, 18N02M16F14D, 18N02M16N04E, 18N02M16J24Z, 18N02M16F19P, 18N02M16N10F, 18N02M16N05F, 18N02M16J25V, 18N02M16J05Q, 18N02M16J05F, 18N02M16F25F, 18N02M16F20A, 18N02M16F15Q, 18N02M16F15A, 18N02M16F10K, 18N02M16N10B, 18N02M16N05W, 18N02M16J20R, 18N02M16J15L, 18N02M16J05B, 18N02M16F25B, 18N02M16J20X, 18N02M16J20S, 18N02M16F10H, 18N02M16N10D, 18N02M16N05I, 18N02M16N05D, 18N02M16J25N, 18N02M16J15I, 18N02M16F25T, 18N02M16F25I, 18N02M16F20T, 18N02M16F15Y, 18N02M16F10N, 18N02M16N05Z, 18N02M16J25P, 18N02M16J25J, 18N02M16K21F, 18N02M16J15Z, 18N02M16K11V, 18N02M16K06K, 18N02M16G21V, 18N02M16G11A, 18N02M16G06F, 18N02M16P01R, 18N02M16P01G, 18N02M16K06W, 18N02M16K01B, 18N02M16G21B, 18N02M16G16R, 18N02M16G16L, 18N02M16G16B, 18N02M16G11W, 18N02M16P06C, 18N02M16P01H, 18N02M16K21S, 18N02M16K21M, 18N02M16K11M, 18N02M16K11C, 18N02M16K06S, 18N02M16G21M, 18N02M16G16S, 18N02M16G11S, 18N02M16G11C, 18N02M16P01D, 18N02M16K21N, 18N02M16K21I, 18N02M16K21D, 18N02M16K16I, 18N02M16K11Y, 18N02M16K11N, 18N02M16K01Y, 18N02M16K01T, 18N02M16G06T, 18N02M16G06I, 18N02M16G06D, 18N02M16P01P, 18N02M16K21U, 18N02M16K21E, 18N02M16K06E, 18N02M16K01J, 18N02M16G11Z, 18N02M16G06U, 18N02M16K17V, 18N02M16K17K, 18N02M16K02Q, 18N02M16K17L, 18N02M16K07G, 18N02M16K07B, 18N02M16G12L, 18N02M16G12B, 18N02M16P02C, 18N02M16K17C, 18N02M16K07H, 18N02M16K02M, 18N02M16K02C, 18N02M16G17X, 18N02M16G07S, 18N02M16G07H, 18N02M16P07D, 18N02M16P02I, 18N02M16K02N, 18N02M16G22Y, 18N02M16G17D, 18N02M16G12Y, 18N02M16K22Z, 18N02M16K22P, 18N02M16K02P, 18N02M16K02J, 18N02M16G07Z, 18N02M16G07U, 18N02M16K18F, 18N02M16K13W, 18N02M16K08A, 18N02M16K08B, 18N02M16K03Q, 18N02M16K03K, 18N02M16G23R, 18N02M16G23K, 18N02M16G18K, 18N02M16P03X, 18N02M16P03H, 18N02M16K18S, 18N02M16K18M, 18N02M16K08S, 18N02M16K03M, 18N02M16P08D, 18N02M16P03Y, 18N02M16P03I, 18N02M16K23Y, 18N02M16K18T, 18N02M16K03Y, 18N02M16G23Y, 18N02M16G18N, 18N02M16G13N, 18N02M16K18P, 18N02M16K18J, 18N02M16G18E, 18N02M16G08J, 18N02M16P04K, 18N02M16K24Q, 18N02M16K19Q, 18N02M16K19F, 18N02M16K19A, 18N02M16K04F, 18N02M16G24K, 18N02M16G24A, 18N02M16G14A, 18N02M16P09G, 18N02M16P04W, 18N02M16K14W, 18N02M16G24G, 18N02M16G09W, 18N02M16P04M, 18N02M16K24C, 18N02M16K19S, 18N02M16K14X, 18N02M16K04M, 18N02M16G19C, 18N02M16P04T, 18N02M16K04D, 18N02M16G19N, 18N02M16G09N, 18N02M16G09I, 18N02M16P09E, 18N02M16K24J, 18N02M16K19E, 18N02M16K14E, 18N02M16K04U, 18N02M16G19Z, 18N02M16G19J, 18N02M16K20K, 18N02M16K05K, 18N02M16G25Q, 18N02M16G10V, 18N02M16G10Q, 18N02M16K25S, 18N02M16K20X, 18N02M16K20H, 18N02M16K15S, 18N02M16K15M, 18N02M16K10W, 18N02M16K10H, 18N02M16K05S, 18N02M16K05H, 18N02M16P10I, 18N02M16P05N, 18N02M16K20T, 18N02M16K10N, 18N02M16K05I, 18N02M16G25T, 18N02M16G20T, 18N02M16G15I, 18N02M16G10I, 18N02M16K25Z, 18N02M16K25U, 18N02M16K25P, 18N02M16K15J, 18N02M16G25J, 18N02M16G20U, 18N02M16G20P, 18N02M16L16V, 18N02M16L16Q, 18N02M16L11Q, 18N02M16H16V, 18N02M16H16K, 18N02M16H11V, 18N02M16H11F, 18N02M16L21G, 18N02M16L16W, 18N02M16L11W, 18N02M16H11L, 18N02M16Q01C, 18N02M16L16C, 18N02M16H21H, 18N02M16H11C, 18N02M16H06X, 18N02M16Q06D, 18N02M16L21T, 18N02M16L21N, 18N02M16L21I, 18N02M16L11T, 18N02M16L06Y, 18N02M16H21D, 18N02M16H11Y, 18N02M16H11T, 18N02M16H06N, 18N02M16H06I, 18N02M16Q01J, 18N02M16Q01E, 18N02M16H21E, 18N02M16H16U, 18N02M16H16P, 18N02M16H11P, 18N02M16H06J, 18N02M16Q02Q, 18N02M16Q02F, 18N02M16L17V, 18N02M16L02V, 18N02M16H22Q, 18N02M16H22K, 18N02M16H22F, 18N02M16Q02B, 18N02M16L07G, 18N02M16H22R, 18N02M16H17W, 18N02M16H17R, 18N02M16H12W, 18N02M16H12G, 18N02M16H07B, 18N02M16L17I, 18N02M16L12I, 18N02M16L07S, 18N02M16L07M, 18N02M16L07C, 18N02M16L02M, 18N02M16L02H, 18N02M16H12M, 18N02M16H12H, 18N02M16H12D, 18N02M16H07N, 18N02M16H07D, 18N02M16Q02P, 18N02M16L07E, 18N02M16L02E, 18N02M16H17P, 18N02M16H07Z, 18N02M16L08V, 18N02M16H23V, 18N02M16H23Q, 18N02M16H08V, 18N02M16H08K, 18N02M16L18B, 18N02M16L08G, 18N02M16L03L, 18N02M16H08W, 18N02M16H08L, 18N02M16H08B, 18N02M16L18M, 18N02M16L13X, 18N02M16L08S, 18N02M16H18C, 18N02M16H13X, 18N02M16H08H, 18N02M16L13I, 18N02M16L08D, 18N02M16L03T, 18N02M16L03I, 18N02M16H18D, 18N02M16H08D, 18N02M16L03Z, 18N02M16L03U, 18N02M16H18Z, 18N02M16H18J, 18N02M16H13P, 18N02M16L04V, 18N02M16H24V, 18N02M16H24A, 18N02M16H19K, 18N02M16H14F, 18N02M16H09A, 18N02M16L09B, 18N02M16H24L, 18N02M16H14W, 18N02M16H09B, 18N02M16L04M, 18N02M16L04H, 18N02M16H19X, 18N02M16H09H, 18N02M16L19J, 18N02M16L09D, 18N02M16L04D, 18N02M16H19U, 18N02M16H19I, 18N02M16L20K, 18N02M16L15F, 18N02M16L10A, 18N02M16L05K, 18N02M16H20A, 18N02M16H15Q, 18N02M16L10G, 18N02M16H25G, 18N02M16H20L, 18N02M16H20G, 18N02M16N08E, 18N02M16N03P, 18N02M16J18Y, 18N02M16J18T, 18N02M16J18I, 18N02M16J13N, 18N02M16J13I, 18N02M16J13E, 18N02M16J08J, 18N02M16J03N, 18N02M16F23Z, 18N02M16F23N, 18N02M16F13Z, 18N02M16F13D, 18N02M16F08P, 18N02M16J19V, 18N02M16J14V, 18N02M16J09F, 18N02M16J04V, 18N02M16F19K, 18N02M16F09Q, 18N02M16N09B, 18N02M16N04B, 18N02M16J19W, 18N02M16J19R, 18N02M16J14B, 18N02M16J09R, 18N02M16J04R, 18N02M16F19B, 18N02M16F14G, 18N02M16F14B, 18N02M16J14H, 18N02M16J04S, 18N02M16J04M, 18N02M16F24X, 18N02M16F19M, 18N02M16N09I, 18N02M16N09D, 18N02M16N04N, 18N02M16J24I, 18N02M16J19Y, 18N02M16J09I, 18N02M16J04D, 18N02M16F19D, 18N02M16F09Z, 18N02M16N05V, 18N02M16N05Q, 18N02M16J15F, 18N02M16J10K, 18N02M16F25K, 18N02M16F20K, 18N02M16F15V, 18N02M16F10A, 18N02M16F20B, 18N02M16N05X, 18N02M16N05S, 18N02M16N05M, 18N02M16N05H, 18N02M16J25M, 18N02M16J15H, 18N02M16J15C, 18N02M16J05H, 18N02M16J05C, 18N02M16F25X, 18N02M16F25S, 18N02M16F20S, 18N02M16J20T, 18N02M16J20D, 18N02M16J10Y, 18N02M16F25D, 18N02M16F10Y, 18N02M16P01Q, 18N02M16J20Z, 18N02M16K16Q, 18N02M16K11Q, 18N02M16K11F, 18N02M16J10U, 18N02M16J05E, 18N02M16G21F, 18N02M16F20Z, 18N02M16G06V, 18N02M16F10P, 18N02M16P01L, 18N02M16K21B, 18N02M16K16L, 18N02M16K11L, 18N02M16K11B, 18N02M16K01W, 18N02M16K01L, 18N02M16G06W, 18N02M16G06G, 18N02M16G06B, 18N02M16G16C, 18N02M16G11H, 18N02M16P01I, 18N02M16K11T, 18N02M16K11I, 18N02M16K06Y, 18N02M16K06T, 18N02M16G21N, 18N02M16G21D, 18N02M16K21Z, 18N02M16G21Z, 18N02M16G16E, 18N02M16G11P, 18N02M16P07A, 18N02M16K17A, 18N02M16K12K, 18N02M16G22F, 18N02M16G07Q, 18N02M16G07K, 18N02M16K12R, 18N02M16K12G, 18N02M16K12B, 18N02M16K02W, 18N02M16K02G, 18N02M16G17B, 18N02M16P02H, 18N02M16K22M, 18N02M16K17M, 18N02M16K02H, 18N02M16G22C, 18N02M16G17S, 18N02M16G12H, 18N02M16G07X, 18N02M16P02Y, 18N02M16P02T, 18N02M16P02D, 18N02M16P07E, 18N02M16K07E, 18N02M16P03R, 18N02M16P03G, 18N02M16P03B, 18N02M16K13V, 18N02M16K08V, 18N02M16K08W, 18N02M16K08Q, 18N02M16K08G, 18N02M16K03R, 18N02M16G23V, 18N02M16G18G, 18N02M16G13G, 18N02M16G13A, 18N02M16G08K, 18N02M16G08A, 18N02M16G08B, 18N02M16K18X, 18N02M16K13S, 18N02M16G23S, 18N02M16G18C, 18N02M16K23T, 18N02M16K18N, 18N02M16K13I, 18N02M16K08T, 18N02M16K03T, 18N02M16K03I, 18N02M16K23Z, 18N02M16K23U, 18N02M16K23E, 18N02M16K13Z, 18N02M16K13U, 18N02M16K08P, 18N02M16G23U, 18N02M16G23P, 18N02M16G23E, 18N02M16G13U, 18N02M16G08E, 18N02M16P04V, 18N02M16K14V, 18N02M16K09V, 18N02M16K09F, 18N02M16K24L, 18N02M16K04G, 18N02M16G19B, 18N02M16G14B, 18N02M16K24H, 18N02M16K19X, 18N02M16K19M, 18N02M16K04H, 18N02M16G09X, 18N02M16G09S, 18N02M16K24D, 18N02M16K19T, 18N02M16K09N, 18N02M16G19I, 18N02M16G09D, 18N02M16K24E, 18N02M16K19P, 18N02M16K19J, 18N02M16G09E, 18N02M16P10F, 18N02M16P05A, 18N02M16K20V, 18N02M16K10A, 18N02M16K05V, 18N02M16G25A, 18N02M16G20F, 18N02M16P05R, 18N02M16P05S, 18N02M16P05B, 18N02M16K25W, 18N02M16K20R, 18N02M16K15G, 18N02M16K10X, 18N02M16K10C, 18N02M16G25S, 18N02M16G25H, 18N02M16G20H, 18N02M16G15W, 18N02M16G15S, 18N02M16G15M, 18N02M16G10R, 18N02M16G10M, 18N02M16K15I, 18N02M16K10T, 18N02M16G20N, 18N02M16G10N, 18N02M16P10E, 18N02M16P05E, 18N02M16K25E, 18N02M16G20J, 18N02M16G15E, 18N02M16L16K, 18N02M16L16A, 18N02M16L01K, 18N02M16L01F, 18N02M16H21V, 18N02M16H11Q, 18N02M16L11G, 18N02M16L11B, 18N02M16H21B, 18N02M16H11B, 18N02M16L21C, 18N02M16L16X, 18N02M16L11M, 18N02M16L11H, 18N02M16L06C, 18N02M16L01C, 18N02M16H21C, 18N02M16H06M, 18N02M16Q01N, 18N02M16L06N, 18N02M16L06I, 18N02M16L01I, 18N02M16H21N, 18N02M16H21I, 18N02M16H16N, 18N02M16H06T, 18N02M16H06D, 18N02M16L16Z, 18N02M16L11P, 18N02M16L11E, 18N02M16L06Z, 18N02M16L06E, 18N02M16H21U, 18N02M16H11Z, 18N02M16L22F, 18N02M16L17A, 18N02M16L07K, 18N02M16H22A, 18N02M16H07A, 18N02M16Q02L, 18N02M16L07W, 18N02M16L02R, 18N02M16H22G, 18N02M16H17B, 18N02M16H12B, 18N02M16L22Y, 18N02M16L22N, 18N02M16L22I, 18N02M16L17S, 18N02M16L17N, 18N02M16L17H, 18N02M16L17C, 18N02M16L12D, 18N02M16H22I, 18N02M16H17M, 18N02M16H17I, 18N02M16H12X, 18N02M16H12N, 18N02M16H07T, 18N02M16H07I, 18N02M16Q07J, 18N02M16Q02U, 18N02M16Q02E, 18N02M16L22J, 18N02M16L12Z, 18N02M16H12J, 18N02M16Q08F, 18N02M16Q03Q, 18N02M16H23K, 18N02M16H13V, 18N02M16H08F, 18N02M16L08W, 18N02M16L03R, 18N02M16L03G, 18N02M16H23W, 18N02M16H18W, 18N02M16H08R, 18N02M16L08M, 18N02M16L18N, 18N02M16L18D, 18N02M16L13Y, 18N02M16L08T, 18N02M16H23N, 18N02M16H18Y, 18N02M16H08N, 18N02M16L18E, 18N02M16L13Z, 18N02M16H23Z, 18N02M16H23U, 18N02M16H13J, 18N02M16H08J, 18N02M16L19F, 18N02M16L19A, 18N02M16L14V, 18N02M16L04K, 18N02M16H09Q, 18N02M16L19G, 18N02M16L09G, 18N02M16L04B, 18N02M16H24R, 18N02M16H19W, 18N02M16H19G, 18N02M16H14R, 18N02M16H14L, 18N02M16L09C, 18N02M16L14D, 18N02M16L04Y, 18N02M16L04J, 18N02M16L04E, 18N02M16H24U, 18N02M16H19D, 18N02M16H14Y, 18N02M16H14P, 18N02M16H09Z, 18N02M16H09J, 18N02M16L20A, 18N02M16L15Q, 18N02M16H20F, 18N02M16H15K, 18N02M16H10Q, 18N02M16L15R, 18N02M16L15L, 18N02M16L10W, 18N02M16L10R, 18N02M16L10L, 18N02M16L05L, 18N02M16H20R, 18N02M16H15B, 18N02M16H10L, 18N02M16N03E, 18N02M16J23N, 18N02M16J23J, 18N02M16J23D, 18N02M16J18D, 18N02M16J08I, 18N02M16J08P, 18N02M16J08D, 18N02M16J03Z, 18N02M16J03D, 18N02M16F18Z, 18N02M16F18T, 18N02M16F13Y, 18N02M16F13J, 18N02M16F08T, 18N02M16N09A, 18N02M16N04V, 18N02M16N04F, 18N02M16N04A, 18N02M16J24V, 18N02M16J24F, 18N02M16J09K, 18N02M16J04K, 18N02M16J04F, 18N02M16F19V, 18N02M16F19A, 18N02M16J24G, 18N02M16F24W, 18N02M16F24R, 18N02M16F14R, 18N02M16F14L, 18N02M16F09W, 18N02M16F09R, 18N02M16N04S, 18N02M16J24X, 18N02M16J14M, 18N02M16J04H, 18N02M16F24H, 18N02M16F19X, 18N02M16F19H, 18N02M16F14S, 18N02M16F14C, 18N02M16F09M, 18N02M16F09C, 18N02M16J14Y, 18N02M16J14T, 18N02M16F24N, 18N02M16N04J, 18N02M16J19Z, 18N02M16J14U, 18N02M16J14E, 18N02M16J09E, 18N02M16J04P, 18N02M16J04J, 18N02M16F24U, 18N02M16F19J, 18N02M16F14P, 18N02M16F14E, 18N02M16N05A, 18N02M16J20V, 18N02M16J20F, 18N02M16F15K, 18N02M16F10V, 18N02M16J20G, 18N02M16J05G, 18N02M16F25W, 18N02M16F25R, 18N02M16F15R, 18N02M16F10R, 18N02M16F10G, 18N02M16J20M, 18N02M16J10X, 18N02M16J10C, 18N02M16F25H, 18N02M16F10S, 18N02M16J10T, 18N02M16J10N, 18N02M16J05T, 18N02M16J05N, 18N02M16F20N, 18N02M16F20D, 18N02M16F10T, 18N02M16P01V, 18N02M16N05J, 18N02M16P01A, 18N02M16K16A, 18N02M16K11A, 18N02M16J10J, 18N02M16K06F, 18N02M16J05Z, 18N02M16K01A, 18N02M16F25U, 18N02M16G21K, 18N02M16F25J, 18N02M16F20P, 18N02M16G16A, 18N02M16P06B, 18N02M16P01W, 18N02M16P06H, 18N02M16P01S, 18N02M16K16X, 18N02M16K16S, 18N02M16K11H, 18N02M16K06M, 18N02M16G11X, 18N02M16P01T, 18N02M16G11N, 18N02M16K16E, 18N02M16K01Z, 18N02M16K01U, 18N02M16K01P, 18N02M16G21E, 18N02M16G16Z, 18N02M16G06J, 18N02M16P02Q, 18N02M16P02F, 18N02M16K22Q, 18N02M16K17Q, 18N02M16K12A, 18N02M16K07Q, 18N02M16G17F, 18N02M16G12K, 18N02M16K07W, 18N02M16K07L, 18N02M16G07W, 18N02M16G07R, 18N02M16G07G, 18N02M16P02M, 18N02M16K12X, 18N02M16K07S, 18N02M16K02S, 18N02M16G17C, 18N02M16G07C, 18N02M16K22Y, 18N02M16K22N, 18N02M16K17N, 18N02M16K17I, 18N02M16K07T, 18N02M16G22N, 18N02M16G12N, 18N02M16P02Z, 18N02M16K17U, 18N02M16K12P, 18N02M16K12E, 18N02M16K02Z, 18N02M16K02U, 18N02M16G17P, 18N02M16G17E, 18N02M16P03V, 18N02M16P03A, 18N02M16K23Q, 18N02M16K23A, 18N02M16K13A, 18N02M16K03W, 18N02M16K03A, 18N02M16G08V, 18N02M16G08W, 18N02M16K08H, 18N02M16K03S, 18N02M16G18M, 18N02M16K08I, 18N02M16K08D, 18N02M16G23T, 18N02M16G18I, 18N02M16G13I, 18N02M16P03J, 18N02M16P03E, 18N02M16K13P, 18N02M16K03P, 18N02M16K03E, 18N02M16G18P, 18N02M16G13Z, 18N02M16G08Z, 18N02M16G08U, 18N02M16P09F, 18N02M16P09A, 18N02M16K24K, 18N02M16K14F, 18N02M16K14A, 18N02M16K04Q, 18N02M16G19F, 18N02M16G19A, 18N02M16G14K, 18N02M16P04L, 18N02M16K24R, 18N02M16K19W, 18N02M16K19L, 18N02M16K19G, 18N02M16K14R, 18N02M16K14B, 18N02M16K09W, 18N02M16K09L, 18N02M16G24B, 18N02M16G19L, 18N02M16G19G, 18N02M16G14L, 18N02M16G09B, 18N02M16P04S, 18N02M16K19C, 18N02M16K14S, 18N02M16K04X, 18N02M16G14X, 18N02M16G09H, 18N02M16K14D, 18N02M16G24N, 18N02M16G14Y, 18N02M16G14T, 18N02M16G14I, 18N02M16P09J, 18N02M16P04J, 18N02M16K24P, 18N02M16G24E, 18N02M16G14Z, 18N02M16G14J, 18N02M16P05V, 18N02M16K25F, 18N02M16K20F, 18N02M16K10Q, 18N02M16K10K, 18N02M16K05Q, 18N02M16G15A, 18N02M16P05M, 18N02M16K25M, 18N02M16K25B, 18N02M16K20L, 18N02M16K15R, 18N02M16K15L, 18N02M16K05W, 18N02M16K05R, 18N02M16K05M, 18N02M16K05G, 18N02M16G25C, 18N02M16G20B, 18N02M16G20C, 18N02M16G10W, 18N02M16G10S, 18N02M16G10H, 18N02M16P05D, 18N02M16K20I, 18N02M16K10D, 18N02M16G20Y, 18N02M16G20I, 18N02M16G10T, 18N02M16K15Z, 18N02M16K15P, 18N02M16G25P, 18N02M16G20Z, 18N02M16Q01Q, 18N02M16Q01F, 18N02M16L21Q, 18N02M16L11V, 18N02M16L11K, 18N02M16L06V, 18N02M16H21K, 18N02M16H21A, 18N02M16H16Q, 18N02M16H06A, 18N02M16Q01G, 18N02M16Q01B, 18N02M16L21B, 18N02M16L11R, 18N02M16L06L, 18N02M16L06B, 18N02M16L01W, 18N02M16H16L, 18N02M16H11W, 18N02M16H06B, 18N02M16Q01M, 18N02M16L21S, 18N02M16L16S, 18N02M16L16M, 18N02M16L16H, 18N02M16L11S, 18N02M16H11X, 18N02M16L06T, 18N02M16L01T, 18N02M16L21P, 18N02M16L16E, 18N02M16H16J, 18N02M16H11E, 18N02M16H06E, 18N02M16Q07F, 18N02M16L12F, 18N02M16L12A, 18N02M16L07Q, 18N02M16L02Q, 18N02M16H17F, 18N02M16H17A, 18N02M16H12V, 18N02M16H12Q, 18N02M16Q07G, 18N02M16Q07B, 18N02M16Q02W, 18N02M16L17L, 18N02M16L12R, 18N02M16L02W, 18N02M16H22B, 18N02M16Q07H, 18N02M16Q02T, 18N02M16Q02N, 18N02M16Q02D, 18N02M16L22X, 18N02M16L22T, 18N02M16L22M, 18N02M16L12S, 18N02M16L12M, 18N02M16L07I, 18N02M16L02X, 18N02M16H17S, 18N02M16H17D, 18N02M16H07X, 18N02M16H07Y, 18N02M16Q02J, 18N02M16L12U, 18N02M16L12J, 18N02M16L02U, 18N02M16H12Z, 18N02M16H12E, 18N02M16H07U, 18N02M16H07J, 18N02M16H07E, 18N02M16L13Q, 18N02M16L13F, 18N02M16L08K, 18N02M16L03V, 18N02M16H18Q, 18N02M16H18K, 18N02M16H13Q, 18N02M16H13A, 18N02M16L08B, 18N02M16H18B, 18N02M16H13R, 18N02M16H13L, 18N02M16H23X, 18N02M16H18H, 18N02M16H08S, 18N02M16H08C, 18N02M16H23Y, 18N02M16H23D, 18N02M16H18N, 18N02M16L13P, 18N02M16L13E, 18N02M16H23E, 18N02M16H18E, 18N02M16L09V, 18N02M16L09L, 18N02M16L04G, 18N02M16H24W, 18N02M16H24G, 18N02M16H09G, 18N02M16L09S, 18N02M16L04C, 18N02M16H19M, 18N02M16H09M, 18N02M16L19P, 18N02M16L14J, 18N02M16L14E, 18N02M16L09Y, 18N02M16L09U, 18N02M16L09N, 18N02M16L09I, 18N02M16L09P, 18N02M16L04Z, 18N02M16H14N, 18N02M16H09T, 18N02M16H09N, 18N02M16L15K, 18N02M16L10Q, 18N02M16H20K, 18N02M16L15B, 18N02M16L05R, 18N02M16H15R, 18N02M16J23I, 18N02M16J13Z, 18N02M16J13T, 18N02M16J13U, 18N02M16J08T, 18N02M16J03P, 18N02M16J03I, 18N02M16F23P, 18N02M16F23D, 18N02M16F18Y, 18N02M16F18J, 18N02M16F08I, 18N02M16F08J, 18N02M16J24A, 18N02M16J19K, 18N02M16J14F, 18N02M16F24V, 18N02M16F24Q, 18N02M16F14Q, 18N02M16F09K, 18N02M16N09G, 18N02M16J19G, 18N02M16J09L, 18N02M16F19R, 18N02M16F14W, 18N02M16N09H, 18N02M16J24H, 18N02M16J24C, 18N02M16J19C, 18N02M16J14S, 18N02M16J09C, 18N02M16J04X, 18N02M16N04Y, 18N02M16F24Y, 18N02M16J24P, 18N02M16J19U, 18N02M16J09Z, 18N02M16F24P, 18N02M16F19U, 18N02M16F14J, 18N02M16J25K, 18N02M16J20K, 18N02M16J15V, 18N02M16J10V, 18N02M16F20Q, 18N02M16F10F, 18N02M16J25G, 18N02M16J10L, 18N02M16F20W, 18N02M16F20G, 18N02M16F15W, 18N02M16F10W, 18N02M16F10L, 18N02M16N10C, 18N02M16N05C, 18N02M16J25X, 18N02M16J10H, 18N02M16J25I, 18N02M16F15I, 18N02M16F10D, 18N02M16N05U, 18N02M16J25E, 18N02M16J20J, 18N02M16K11K, 18N02M16G21Q, 18N02M16G16K, 18N02M16F20E, 18N02M16F10Z, 18N02M16K21L, 18N02M16K11W, 18N02M16K06B, 18N02M16G21W, 18N02M16G16G, 18N02M16G11L, 18N02M16G11B, 18N02M16P01M, 18N02M16K11S, 18N02M16K06H, 18N02M16G21S, 18N02M16G21C, 18N02M16G06H, 18N02M16P01Y, 18N02M16K06I, 18N02M16K01I, 18N02M16G21Y, 18N02M16G21I, 18N02M16G16T, 18N02M16G16I, 18N02M16K16Z, 18N02M16K16U, 18N02M16K11U, 18N02M16K11P, 18N02M16K11J, 18N02M16K01E, 18N02M16G21U, 18N02M16G16P, 18N02M16G16J, 18N02M16P02V, 18N02M16P02A, 18N02M16K22V, 18N02M16K22F, 18N02M16K07V, 18N02M16G22Q, 18N02M16G12F, 18N02M16G07A, 18N02M16P02W, 18N02M16P02L, 18N02M16P02B, 18N02M16K22R, 18N02M16K12W, 18N02M16G22G, 18N02M16G22B, 18N02M16G17G, 18N02M16G12R, 18N02M16G12G, 18N02M16G07B, 18N02M16K22X, 18N02M16K22C, 18N02M16K17S, 18N02M16G17H, 18N02M16G12X, 18N02M16G12C, 18N02M16P07I, 18N02M16K07I, 18N02M16K02I, 18N02M16G22I, 18N02M16G22D, 18N02M16G12I, 18N02M16G07T, 18N02M16G07N, 18N02M16G07I, 18N02M16G07D, 18N02M16P02U, 18N02M16P02J, 18N02M16K22J, 18N02M16K17Z, 18N02M16K12J, 18N02M16K07J, 18N02M16G22P, 18N02M16G12Z, 18N02M16P08A, 18N02M16P08B, 18N02M16P03Q, 18N02M16P03K, 18N02M16K23F, 18N02M16K18W, 18N02M16K18G, 18N02M16K18B, 18N02M16K13K, 18N02M16K08K, 18N02M16K08F, 18N02M16K03L, 18N02M16G18W, 18N02M16G18L, 18N02M16G13K, 18N02M16G13F, 18N02M16G08G, 18N02M16P08C, 18N02M16P03S, 18N02M16K23C, 18N02M16K18C, 18N02M16G23X, 18N02M16G08S, 18N02M16G08C, 18N02M16K18Y, 18N02M16K18I, 18N02M16K18D, 18N02M16K13Y, 18N02M16K08Y, 18N02M16K03N, 18N02M16G23D, 18N02M16G18T, 18N02M16G13T, 18N02M16G13D, 18N02M16P03Z, 18N02M16K23P, 18N02M16K03J, 18N02M16G18U, 18N02M16G13P, 18N02M16G08P, 18N02M16K09K, 18N02M16K04A, 18N02M16G09K, 18N02M16K24W, 18N02M16K19B, 18N02M16K14L, 18N02M16K14G, 18N02M16K09R, 18N02M16K04W, 18N02M16G24W, 18N02M16G14W, 18N02M16G14G, 18N02M16G09R, 18N02M16P09H, 18N02M16P04X, 18N02M16K24M, 18N02M16K19H, 18N02M16K04C, 18N02M16G24S, 18N02M16P09I, 18N02M16P04Y, 18N02M16K19Y, 18N02M16K14Y, 18N02M16G24D, 18N02M16G19Y, 18N02M16G14D, 18N02M16K14U, 18N02M16K09P, 18N02M16K09E, 18N02M16G14U, 18N02M16G14E, 18N02M16G09J, 18N02M16K25A, 18N02M16K20Q, 18N02M16K20A, 18N02M16K15Q, 18N02M16K15A, 18N02M16G10A, 18N02M16P10H, 18N02M16P05W, 18N02M16K25C, 18N02M16K20S, 18N02M16K20B, 18N02M16K10S, 18N02M16K10L, 18N02M16K10B, 18N02M16K05X, 18N02M16G25X, 18N02M16G25M, 18N02M16G20R, 18N02M16G20M, 18N02M16G15B, 18N02M16G10L, 18N02M16P05I, 18N02M16K25T, 18N02M16K25N, 18N02M16K20D, 18N02M16K10I, 18N02M16K05Y, 18N02M16K05T, 18N02M16K05D, 18N02M16P05U, 18N02M16K25J, 18N02M16K10P, 18N02M16K10J, 18N02M16G25U, 18N02M16G15U, 18N02M16Q01V, 18N02M16L21F, 18N02M16L06Q, 18N02M16Q06G, 18N02M16Q06B, 18N02M16L16L, 18N02M16L01R, 18N02M16H21G, 18N02M16L06X, 18N02M16L06M, 18N02M16L01H, 18N02M16H06C, 18N02M16L21D, 18N02M16L16I, 18N02M16L11I, 18N02M16L11D, 18N02M16L06D, 18N02M16H16Y, 18N02M16H16T, 18N02M16H11D, 18N02M16L21U, 18N02M16H21Z, 18N02M16H16Z, 18N02M16H11J, 18N02M16L22V, 18N02M16L12Q, 18N02M16L07V, 18N02M16L07F, 18N02M16L02A, 18N02M16H17V, 18N02M16H07V, 18N02M16H07F, 18N02M16Q02R, 18N02M16L17W, 18N02M16L02B, 18N02M16H12R, 18N02M16H12L, 18N02M16Q02X, 18N02M16Q02S, 18N02M16Q02Y, 18N02M16L17X, 18N02M16L12H, 18N02M16L07Y, 18N02M16L02Y, 18N02M16L02S, 18N02M16L02I, 18N02M16H22N, 18N02M16H22C, 18N02M16H17C, 18N02M16L22P, 18N02M16L07P, 18N02M16H22Z, 18N02M16H17Z, 18N02M16H17U, 18N02M16H17E, 18N02M16Q03V, 18N02M16Q03K, 18N02M16L23A, 18N02M16L08Q, 18N02M16L08A, 18N02M16L03A, 18N02M16H23F, 18N02M16H08A, 18N02M16L18L, 18N02M16L13R, 18N02M16L13G, 18N02M16L08R, 18N02M16H23R, 18N02M16H13B, 18N02M16L18H, 18N02M16L13S, 18N02M16L13C, 18N02M16L03S, 18N02M16L03M, 18N02M16H18X, 18N02M16H18S, 18N02M16H18M, 18N02M16H13M, 18N02M16L18I, 18N02M16L13N, 18N02M16L08I, 18N02M16L03Y, 18N02M16H13T, 18N02M16H13N, 18N02M16H13D, 18N02M16H08T, 18N02M16L08Z, 18N02M16H23P, 18N02M16H08Z, 18N02M16L09A, 18N02M16L04A, 18N02M16H24K, 18N02M16H19Q, 18N02M16H19F, 18N02M16H14V, 18N02M16L19B, 18N02M16L14G, 18N02M16L14B, 18N02M16L04W, 18N02M16H19L, 18N02M16H14G, 18N02M16H09L, 18N02M16L14X, 18N02M16L14S, 18N02M16L14C, 18N02M16L09X, 18N02M16H24S, 18N02M16H24H, 18N02M16H14X, 18N02M16H14C, 18N02M16L19D, 18N02M16L14Y, 18N02M16L09Z, 18N02M16L09J, 18N02M16L04U, 18N02M16H24I, 18N02M16H24D, 18N02M16H19Y, 18N02M16H19Z, 18N02M16H19P, 18N02M16H09E, 18N02M16L20F, 18N02M16L15V, 18N02M16H25Q, 18N02M16H25F, 18N02M16H15A, 18N02M16H10K, 18N02M16L20G, 18N02M16L05G, 18N02M16H25W, 18N02M16H25R, 18N02M16N08D, 18N02M16N03Y, 18N02M16J23P, 18N02M16J18U, 18N02M16F23Y, 18N02M16F23E, 18N02M16F18E, 18N02M16F08U, 18N02M16J19F, 18N02M16J14Q, 18N02M16J09A, 18N02M16F14A, 18N02M16N04W, 18N02M16N04L, 18N02M16J04B, 18N02M16F24L, 18N02M16F19W, 18N02M16N09C, 18N02M16N04C, 18N02M16F24M, 18N02M16F24C, 18N02M16F14X, 18N02M16F14H, 18N02M16F09X, 18N02M16F09H, 18N02M16N04T, 18N02M16J24Y, 18N02M16J24T, 18N02M16J24N, 18N02M16J14I, 18N02M16J09T, 18N02M16F24I, 18N02M16F24D, 18N02M16F19N, 18N02M16F14I, 18N02M16N09J, 18N02M16N09E, 18N02M16N04P, 18N02M16J24J, 18N02M16J19P, 18N02M16J19J, 18N02M16J14P, 18N02M16J04Z, 18N02M16J04E, 18N02M16F14U, 18N02M16J25F, 18N02M16J10Q, 18N02M16J10A, 18N02M16F25Q, 18N02M16N05L, 18N02M16J25B, 18N02M16J20W, 18N02M16J20B, 18N02M16J10R, 18N02M16J10B, 18N02M16J05L, 18N02M16F15G, 18N02M16F10B, 18N02M16J15X, 18N02M16J15S, 18N02M16J10S, 18N02M16F20X, 18N02M16F15M, 18N02M16N05T, 18N02M16J25Y, 18N02M16J20I, 18N02M16J15N, 18N02M16F10I, 18N02M16P06A, 18N02M16K21V, 18N02M16J25U, 18N02M16J20U, 18N02M16J20E, 18N02M16J15U, 18N02M16J15P, 18N02M16J15E, 18N02M16J10P, 18N02M16J10E, 18N02M16K06A, 18N02M16K01K, 18N02M16K01F, 18N02M16G16Q, 18N02M16F20J, 18N02M16G06A, 18N02M16P01B, 18N02M16K21W, 18N02M16K21R, 18N02M16K16G, 18N02M16K11G, 18N02M16K06R, 18N02M16K06L, 18N02M16G11G, 18N02M16G06L, 18N02M16K21X, 18N02M16K16M, 18N02M16K16C, 18N02M16K06X, 18N02M16K06C, 18N02M16K01X, 18N02M16K01C, 18N02M16K21Y, 18N02M16G16Y, 18N02M16G16D, 18N02M16G11I, 18N02M16G11D, 18N02M16P06J, 18N02M16K21P, 18N02M16K16J, 18N02M16K11E, 18N02M16G11E, 18N02M16G06Z, 18N02M16P02K, 18N02M16K22K, 18N02M16K12Q, 18N02M16K07F, 18N02M16K02V, 18N02M16K02K, 18N02M16G22A, 18N02M16G12A, 18N02M16P07B, 18N02M16K22W, 18N02M16K17W, 18N02M16K17G, 18N02M16G17L, 18N02M16G07L, 18N02M16P02S, 18N02M16K22S, 18N02M16K22H, 18N02M16K12S, 18N02M16K12H, 18N02M16K12C, 18N02M16K07C, 18N02M16K02X, 18N02M16G22H, 18N02M16G17M, 18N02M16G07M, 18N02M16K12T, 18N02M16K12I, 18N02M16K12D, 18N02M16G17Y, 18N02M16G17T, 18N02M16K22E, 18N02M16K17J, 18N02M16K07U, 18N02M16G22Z, 18N02M16G22E, 18N02M16G07P, 18N02M16P03L, 18N02M16K23R, 18N02M16K23L, 18N02M16K18L, 18N02M16K13R, 18N02M16K13G, 18N02M16G23F, 18N02M16G23G, 18N02M16G13W, 18N02M16G13Q, 18N02M16G13R, 18N02M16G08L, 18N02M16P08H, 18N02M16K03X, 18N02M16K03C, 18N02M16G23C, 18N02M16G18X, 18N02M16G18S, 18N02M16G13X, 18N02M16G13M, 18N02M16K23N, 18N02M16K13T, 18N02M16K13N, 18N02M16K08N, 18N02M16K03D, 18N02M16G23N, 18N02M16P08J, 18N02M16P08E, 18N02M16P03P, 18N02M16K18U, 18N02M16K08J, 18N02M16G18J, 18N02M16P04Q, 18N02M16K14K, 18N02M16K04V, 18N02M16G19K, 18N02M16G14V, 18N02M16P09B, 18N02M16P04B, 18N02M16K24G, 18N02M16K09B, 18N02M16G09L, 18N02M16K14M, 18N02M16K14H, 18N02M16K09X, 18N02M16K04S, 18N02M16G24C, 18N02M16G19M, 18N02M16G14S, 18N02M16G14H, 18N02M16P09D, 18N02M16K19D, 18N02M16K14I, 18N02M16K09T, 18N02M16K09D, 18N02M16K04Y, 18N02M16G24I, 18N02M16G19D, 18N02M16P04U, 18N02M16K19Z, 18N02M16K19U, 18N02M16K04Z, 18N02M16K04J, 18N02M16G19E, 18N02M16G14P, 18N02M16G09Z, 18N02M16G09P, 18N02M16P05Q, 18N02M16P05K, 18N02M16K25V, 18N02M16K15V, 18N02M16K10F, 18N02M16K05A, 18N02M16G25K, 18N02M16G20Q, 18N02M16G15Q, 18N02M16G10K, 18N02M16P10B, 18N02M16P05G, 18N02M16P05H, 18N02M16P05C, 18N02M16K25L, 18N02M16K25H, 18N02M16K20G, 18N02M16K20C, 18N02M16K10R, 18N02M16G20W, 18N02M16G15G, 18N02M16G10X, 18N02M16P05Y, 18N02M16K25Y, 18N02M16K15T, 18N02M16K15D, 18N02M16K10Y, 18N02M16K05N, 18N02M16K20J, 18N02M16K10E, 18N02M16K05Z, 18N02M16K05J, 18N02M16K05E, 18N02M16G15P, 18N02M16G10Z, 18N02M16G10U, 18N02M16G10P, 18N02M16Q06A, 18N02M16L01A, 18N02M16H06V, 18N02M16Q01R, 18N02M16L21L, 18N02M16L16G, 18N02M16L16B, 18N02M16L01L, 18N02M16L01B, 18N02M16H21R, 18N02M16H16R, 18N02M16H16G, 18N02M16H16B, 18N02M16H06R, 18N02M16L11X, 18N02M16L11C, 18N02M16L06S, 18N02M16L01M, 18N02M16H16X, 18N02M16H16H, 18N02M16H16C, 18N02M16H06S, 18N02M16Q01Y, 18N02M16Q01D, 18N02M16L16D, 18N02M16L01Y, 18N02M16L01N, 18N02M16H16D, 18N02M16Q06J, 18N02M16Q01P, 18N02M16L16U, 18N02M16L16P, 18N02M16L16J, 18N02M16L01U, 18N02M16H21P, 18N02M16H21J, 18N02M16H16E, 18N02M16Q07A, 18N02M16H22V, 18N02M16H17K, 18N02M16H12K, 18N02M16L22W, 18N02M16L22G, 18N02M16H07R, 18N02M16Q02M, 18N02M16Q02H, 18N02M16Q02C, 18N02M16L22C, 18N02M16L17D, 18N02M16L12Y, 18N02M16L02N, 18N02M16L02D, 18N02M16H22S, 18N02M16H22D, 18N02M16H17Y, 18N02M16H17T, 18N02M16H12T, 18N02M16H07H, 18N02M16Q07E, 18N02M16L22U, 18N02M16L22E, 18N02M16L17J, 18N02M16L17E, 18N02M16L12E, 18N02M16L07Z, 18N02M16L07J, 18N02M16H22U, 18N02M16H22J, 18N02M16H12U, 18N02M16H07P, 18N02M16Q03A, 18N02M16L23V, 18N02M16L23Q, 18N02M16L18V, 18N02M16L18K, 18N02M16L18A, 18N02M16L13K, 18N02M16L13A, 18N02M16H23A, 18N02M16H18A, 18N02M16L08L, 18N02M16H18R, 18N02M16H18G, 18N02M16L13M, 18N02M16L13H, 18N02M16L08H, 18N02M16L03C, 18N02M16H23S, 18N02M16H23C, 18N02M16H08M, 18N02M16L03N, 18N02M16L03D, 18N02M16H23I, 18N02M16L03P, 18N02M16H13U, 18N02M16L14A, 18N02M16L04Q, 18N02M16H19A, 18N02M16H14Q, 18N02M16H09K, 18N02M16L14R, 18N02M16L04L, 18N02M16H19R, 18N02M16H19B, 18N02M16H14B, 18N02M16H09W, 18N02M16L19C, 18N02M16L14M, 18N02M16H24X, 18N02M16H24C, 18N02M16H14S, 18N02M16H14H, 18N02M16L19I, 18N02M16L14Z, 18N02M16L14T, 18N02M16H24E, 18N02M16H14U, 18N02M16H14J, 18N02M16H09I, 18N02M16L10K, 18N02M16L05Q, 18N02M16L05F, 18N02M16H15V, 18N02M16H15F, 18N02M16H25B, 18N02M16H15W, 18N02M16H10W, 18N02M16H10G, 18N02M16N03N, 18N02M16N03I, 18N02M16N03J, 18N02M16N03D, 18N02M16J23E, 18N02M16J18E, 18N02M16J08Y, 18N02M16J08E, 18N02M16J03Y, 18N02M16F23U, 18N02M16F23J, 18N02M16F13T, 18N02M16F13N, 18N02M16F13E, 18N02M16F08D, 18N02M16N09F, 18N02M16N04Q, 18N02M16N04K, 18N02M16J24K, 18N02M16J14K, 18N02M16J09V, 18N02M16F19Q, 18N02M16F14V, 18N02M16F14K, 18N02M16F09F, 18N02M16N04R, 18N02M16J14W, 18N02M16J09W, 18N02M16F24G, 18N02M16J19X, 18N02M16J19S, 18N02M16J19M, 18N02M16J09S, 18N02M16F24S, 18N02M16J19I, 18N02M16J09N, 18N02M16J04N, 18N02M16J04I, 18N02M16F09T, 18N02M16N04U, 18N02M16J09U, 18N02M16F14Z, 18N02M16F09P, 18N02M16N10A, 18N02M16N05K, 18N02M16J05V, 18N02M16J05A, 18N02M16F25A, 18N02M16F15F, 18N02M16N05R, 18N02M16N05G, 18N02M16N05B, 18N02M16J20L, 18N02M16J15G, 18N02M16J15B, 18N02M16J10W, 18N02M16J10G, 18N02M16F15B, 18N02M16J25H, 18N02M16J25C, 18N02M16J20H, 18N02M16J10M, 18N02M16F25C, 18N02M16F20C, 18N02M16N10I, 18N02M16N05Y, 18N02M16J10D, 18N02M16F15T, 18N02M16F15N, 18N02M16P06F, 18N02M16J20P, 18N02M16J05P, 18N02M16F25Z, 18N02M16F25P, 18N02M16F25E, 18N02M16G21A, 18N02M16F20U, 18N02M16G16F, 18N02M16G11V, 18N02M16F15U, 18N02M16G11K, 18N02M16F10E, 18N02M16K21G, 18N02M16K16B, 18N02M16K11R, 18N02M16K01R, 18N02M16G21L, 18N02M16P01C, 18N02M16K21H, 18N02M16K21C, 18N02M16K16H, 18N02M16G16X, 18N02M16G11M, 18N02M16G06C, 18N02M16P01N, 18N02M16K16T, 18N02M16K16N, 18N02M16K11D, 18N02M16K06N, 18N02M16K06D, 18N02M16K01N, 18N02M16G11Y, 18N02M16G06N, 18N02M16P01Z, 18N02M16P01J, 18N02M16K06Z, 18N02M16K06U, 18N02M16K06J, 18N02M16G11U, 18N02M16G06P, 18N02M16K12V, 18N02M16K02F, 18N02M16G22V, 18N02M16G17V, 18N02M16G17Q, 18N02M16G07V, 18N02M16P07G, 18N02M16K02R, 18N02M16G17W, 18N02M16G17R, 18N02M16G12W, 18N02M16K17X, 18N02M16K17H, 18N02M16K07X, 18N02M16P02N, 18N02M16K12Y, 18N02M16K07Y, 18N02M16K07N, 18N02M16K02Y, 18N02M16K02T, 18N02M16G17N, 18N02M16G17I, 18N02M16G12T, 18N02M16G12D, 18N02M16G07Y, 18N02M16P02E, 18N02M16K17E, 18N02M16K12U, 18N02M16G12U, 18N02M16G12P, 18N02M16G12J, 18N02M16G07J, 18N02M16G07E, 18N02M16P08G, 18N02M16P03W, 18N02M16K23G, 18N02M16K23B, 18N02M16K13L, 18N02M16K13F, 18N02M16K08L, 18N02M16G23A, 18N02M16G18V, 18N02M16G18F, 18N02M16P03C, 18N02M16K23H, 18N02M16K18H, 18N02M16K13H, 18N02M16K13C, 18N02M16K08X, 18N02M16K08C, 18N02M16G23M, 18N02M16G13H, 18N02M16G08X, 18N02M16P03N, 18N02M16G23I, 18N02M16G18D, 18N02M16G13Y, 18N02M16G08I, 18N02M16G08D, 18N02M16P03U, 18N02M16K23J, 18N02M16K08U, 18N02M16K03Z, 18N02M16G18Z, 18N02M16G13J, 18N02M16P04F, 18N02M16P04A, 18N02M16K24V, 18N02M16K24F, 18N02M16K19V, 18N02M16K09Q, 18N02M16G09Q, 18N02M16P04R, 18N02M16P04G, 18N02M16P04H, 18N02M16P04C, 18N02M16K24X, 18N02M16K24S, 18N02M16K09M, 18N02M16G24M, 18N02M16G19S, 18N02M16G19H, 18N02M16G09M, 18N02M16K24Y, 18N02M16K24T, 18N02M16K14T, 18N02M16K04I, 18N02M16G14N, 18N02M16G09T, 18N02M16K24Z, 18N02M16K14J, 18N02M16K09J, 18N02M16K04P, 18N02M16K04E, 18N02M16G24P, 18N02M16G24J, 18N02M16P05F, 18N02M16G25V, 18N02M16G20A, 18N02M16K15B, 18N02M16K10G, 18N02M16G25G, 18N02M16G15R, 18N02M16G10C, 18N02M16P10D, 18N02M16P05T, 18N02M16G25N, 18N02M16G15N, 18N02M16G15D, 18N02M16P10J, 18N02M16P05J, 18N02M16K20U, 18N02M16K20P, 18N02M16K15U, 18N02M16K05P, 18N02M16G20E, 18N02M16G10J, 18N02M16Q01K, 18N02M16L21K, 18N02M16L21A, 18N02M16L16F, 18N02M16L11F, 18N02M16L06F, 18N02M16L01V, 18N02M16H21F, 18N02M16H16F, 18N02M16H16A, 18N02M16H11K, 18N02M16H06F, 18N02M16Q01W, 18N02M16L21W, 18N02M16L21R, 18N02M16L06G, 18N02M16L01G, 18N02M16H16W, 18N02M16H11G, 18N02M16H06G, 18N02M16Q01X, 18N02M16Q01S, 18N02M16Q01H, 18N02M16H21X, 18N02M16H21S, 18N02M16H16S, 18N02M16Q01T, 18N02M16L16Y, 18N02M16L16N, 18N02M16L11Y, 18N02M16L11N, 18N02M16H21T, 18N02M16H11N, 18N02M16H06Y, 18N02M16L21E, 18N02M16L11J, 18N02M16L06P, 18N02M16L01Z, 18N02M16L01E, 18N02M16H11U, 18N02M16H06U, 18N02M16H06P, 18N02M16Q02V, 18N02M16Q02K, 18N02M16Q02A, 18N02M16L17K, 18N02M16L12V, 18N02M16L02K, 18N02M16H07Q, 18N02M16Q02G, 18N02M16L22R, 18N02M16L17R, 18N02M16L17B, 18N02M16L12L, 18N02M16L12G, 18N02M16L12B, 18N02M16H17L, 18N02M16H07L, 18N02M16H07G, 18N02M16L22S, 18N02M16L22D, 18N02M16L12X, 18N02M16L12T, 18N02M16L12N, 18N02M16L12C, 18N02M16L07T, 18N02M16L07D, 18N02M16L02T, 18N02M16L02C, 18N02M16H22X, 18N02M16H22Y, 18N02M16H22T, 18N02M16H22M, 18N02M16H22H, 18N02M16H17X, 18N02M16H12S, 18N02M16H07S, 18N02M16L17Z, 18N02M16L17U, 18N02M16L07U, 18N02M16L02Z, 18N02M16L02P, 18N02M16H22E, 18N02M16L23F, 18N02M16L18Q, 18N02M16L13V, 18N02M16L03Q, 18N02M16L03F, 18N02M16L13W, 18N02M16L03W, 18N02M16H13W, 18N02M16H13S, 18N02M16L13T, 18N02M16L13D, 18N02M16L08Y, 18N02M16H23T, 18N02M16H18T, 18N02M16H18I, 18N02M16H13Y, 18N02M16H13I, 18N02M16H08I, 18N02M16L08E, 18N02M16L03J, 18N02M16H23J, 18N02M16H18U, 18N02M16H18P, 18N02M16H13Z, 18N02M16H08E, 18N02M16L14Q, 18N02M16L09K, 18N02M16H24F, 18N02M16H09F, 18N02M16L14W, 18N02M16L09W, 18N02M16L09R, 18N02M16L19M, 18N02M16L14H, 18N02M16L09H, 18N02M16H19S, 18N02M16H19C, 18N02M16H09C, 18N02M16L04N, 18N02M16L04P, 18N02M16H19T, 18N02M16H14Z, 18N02M16H14T, 18N02M16H14D, 18N02M16H09P, 18N02M16L15A, 18N02M16L10F, 18N02M16L05A, 18N02M16H25K, 18N02M16H25A, 18N02M16H20Q, 18N02M16H10V, 18N02M16H10F, 18N02M16L20B, 18N02M16L15W, 18N02M16L10B, 18N02M16H25L, 18N02M16H20W, 18N02M16H15G'],
                    77
                );
            }
           // 18N02M16N08J celta que se retiro para radicar con are 



            // SE ACCEDE A CADA UNA DE LA INFORMACIÓN RETORNADA EN LA FUNCIÓN MonitorearAreas PARA UTILIZARLA MÁS ADELANTE EN OTROS PROCEOS
            IdArea = DetallesCompletos.IdArea;
            Aviso = DetallesCompletos.Aviso;
            Celda = DetallesCompletos.Celda;
            Area = DetallesCompletos.Area;
            Comas = DetallesCompletos.Comas;

            const continCeldas = await page.$x('//span[contains(.,"Continuar")]');
            await continCeldas[1].click();
            console.log(IdArea);
            await page.waitForTimeout(3000);

            const Todoslosparametros = await page.$$eval("span", links =>
                links.map(link => link.textContent)
            );
            var cont = 1;
            for (let i = 0; i < Todoslosparametros.length; i++) {
                const elemento = Todoslosparametros[i];
                if (elemento == "Vea los errores a continuación (dentro de las pestañas):") {
                    cont = 0;
                }

            }
            const FechaReapertura = await page.$$eval("a", links =>
                links.map(link => link.textContent)
            );
            var Reapertura = 0;
            //EL DIA DE MAÑANA 12 04 2022 SE REALIZARA LA PRUEBA
            //PARA ASI VALIDAR CUANDO APAREZCA ALGO DIFERENTE A "Las siguientes celdas de selección no están disponibles:"

            for (let i = 0; i < FechaReapertura.length; i++) {


                var Text = FechaReapertura[i].substring(24, 120);
                if (Text == "Las siguientes celdas de selección no están disponibles ya que la fecha de reapertura es futura:") {
                    console.log("Lo encontre");
                    Reapertura = 1;
                    contreapertura++;
                    if (contreapertura < 2) {
                        Correo(3, IdArea, Celda);
                    }


                    console.log(contreapertura);
                } else {
                    var Text = FechaReapertura[i].substring(24, 140);
                }

            }




            if (cont == "0") {
                console.log("Limpio El campo del area");
                page.evaluate(() => {
                    document.querySelector('[id="cellIdsTxtId"]').value = "";
                });
                Band++;
                //Este es la cantidad de areas mas 1
                if (Band == 2) {
                    Band = 1;
                }

            } else {
                Band = 99;
            }
            console.log("limpia el timer");
            clearTimeout(TimeArea);
        }



        console.log("ahhh se salio Y_Y ");
        var bandera = 0;

        let TimeNOpaso = setTimeout(() => {
            bandera = 99;
            console.log("ENTRO EN EL TimeNOpaso");
            page.close();
            Mineria(browser,  Pin);
        }, 20000);

        console.log(page.url());

        while (bandera != 99) {



            await page.waitForTimeout(500);
            console.log(page.url());
            if (page.url() == 'https://annamineria.anm.gov.co/sigm/index.html#/p_CaaIataInputTechnicalEconomicalDetails') {
                bandera = 99;

                console.log("Si cargo la pagina  ");
                clearTimeout(TimeNOpaso);
            } else {

                console.log("Nada no la carga ");
            }



        }



        clearTimeout(TimeNOpaso);









        const continDetallesdelArea2 = await page.$x('//a[contains(.,"área")]');
        await continDetallesdelArea2[4].click();

        const grupoEtnicoYN = await page.$('input[value="N"]');
        await grupoEtnicoYN.click();


        const btnInfoTecnica = await page.$x('//a[contains(.,"Información t")]');
        await btnInfoTecnica[0].click();

        //CORREO LIBERADA
        Correo(1, IdArea, Celda);


        let RadiPrimero = setTimeout(() => {

            // console.log("ENTRO EN EL RadiPrimero");
            // page.close();
            // Mineria(browser,  Pin);


        }, 30000);

        await page.evaluate(() => {

            document.querySelector('[id="yearOfExecutionId0"]').value = 'number:1'

            angular.element(document.getElementById('yearOfExecutionId0')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId0"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId0')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId0"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId0')).triggerHandler('change');

            //Contactos con la comunidad y enfoque social

            document.querySelector('[id="yearOfExecutionId1"]').value = 'number:1'

            angular.element(document.getElementById('yearOfExecutionId1')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId1"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId1')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId1"]').value = 'TSCA'

            angular.element(document.getElementById('laborSuitabilityId1')).triggerHandler('change');

            //Base topográfica del área

            document.querySelector('[id="yearOfExecutionId2"]').value = 'number:1'

            angular.element(document.getElementById('yearOfExecutionId2')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId2"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId2')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId2"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId2')).triggerHandler('change');

            //Cartografía geológica

            document.querySelector('[id="yearOfExecutionId3"]').value = 'number:1'

            angular.element(document.getElementById('yearOfExecutionId3')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId3"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId3')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId3"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId3')).triggerHandler('change');

            //Excavación de trincheras y apiques

            document.querySelector('[id="yearOfExecutionId4"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId4')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId4"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId4')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId4"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId4')).triggerHandler('change');

            //Geoquímica y otros análisis

            document.querySelector('[id="yearOfExecutionId5"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId5')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId5"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId5')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId5"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId5')).triggerHandler('change');

            //Geofísica

            document.querySelector('[id="yearOfExecutionId6"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId6')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId6"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId6')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId6"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId6')).triggerHandler('change');

            //Estudio de dinámica fluvial del cauce

            document.querySelector('[id="yearOfExecutionId7"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId7')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId7"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId7')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId7"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId7')).triggerHandler('change');

            // Características hidrológicas y sedimentológicas del cauce

            document.querySelector('[id="yearOfExecutionId8"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId8')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId8"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId8')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId8"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId8')).triggerHandler('change');

            //Pozos y Galerías Exploratorias

            document.querySelector('[id="yearOfExecutionId9"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId9')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId9"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId9')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId9"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId9')).triggerHandler('change');

            //Perforaciones profundas

            document.querySelector('[id="yearOfExecutionId10"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId10')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId10"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId10')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId10"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId10')).triggerHandler('change');

            //Muestreo y análisis de calidad

            document.querySelector('[id="yearOfExecutionId11"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId11')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId11"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId11')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId11"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId11')).triggerHandler('change');

            //Estudio geotécnico

            document.querySelector('[id="yearOfExecutionId12"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId12')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId12"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId12')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId12"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId12')).triggerHandler('change');

            //Estudio Hidrológico

            document.querySelector('[id="yearOfExecutionId13"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId13')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId13"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId13')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId13"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId13')).triggerHandler('change');

            //Estudio Hidrogeológico

            document.querySelector('[id="yearOfExecutionId14"]').value = 'number:2'

            angular.element(document.getElementById('yearOfExecutionId14')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId14"]').value = 'number:2'

            angular.element(document.getElementById('yearOfDeliveryId14')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId14"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId14')).triggerHandler('change');

            //Evaluación del modelo geológico

            document.querySelector('[id="yearOfExecutionId15"]').value = 'number:3'

            angular.element(document.getElementById('yearOfExecutionId15')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId15"]').value = 'number:3'

            angular.element(document.getElementById('yearOfDeliveryId15')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId15"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId15')).triggerHandler('change');

            //Actividades exploratorias adicionales (Se describe en el anexo Tecnico que se allegue)

            document.querySelector('[id="yearOfExecutionId16"]').value = 'number:3'

            angular.element(document.getElementById('yearOfExecutionId16')).triggerHandler('change');

            document.querySelector('[id="yearOfDeliveryId16"]').value = 'number:3'

            angular.element(document.getElementById('yearOfDeliveryId16')).triggerHandler('change');

            document.querySelector('[id="laborSuitabilityId16"]').value = 'IIG'

            angular.element(document.getElementById('laborSuitabilityId16')).triggerHandler('change');



            // Actividades Ambientales etapa de exploración


            //Selección optima de Sitios de Campamentos y Helipuertos

            angular.element(document.getElementById('envYearOfDeliveryId0')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId0"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId0')).triggerHandler('change');

            //Manejo de Aguas Lluvias


            angular.element(document.getElementById('envYearOfDeliveryId1')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId1"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId1')).triggerHandler('change');

            //Manejo de Aguas Residuales Domesticas


            angular.element(document.getElementById('envYearOfDeliveryId2')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId2"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId2')).triggerHandler('change');

            //Manejo de Cuerpos de Agua

            angular.element(document.getElementById('envYearOfDeliveryId3')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId3"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId3')).triggerHandler('change');

            //Manejo de Material Particulado y Gases


            angular.element(document.getElementById('envYearOfDeliveryId4')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId4"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId4')).triggerHandler('change');

            //Manejo del Ruido


            angular.element(document.getElementById('envYearOfDeliveryId5')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId5"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId5')).triggerHandler('change');

            // Manejo de Combustibles

            angular.element(document.getElementById('envYearOfDeliveryId6')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId6"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId6')).triggerHandler('change');

            //Manejo de Taludes


            angular.element(document.getElementById('envYearOfDeliveryId7')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId7"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId7')).triggerHandler('change');

            //Manejo de Accesos


            angular.element(document.getElementById('envYearOfDeliveryId8')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId8"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId8')).triggerHandler('change');

            // Manejo de Residuos Solidos

            angular.element(document.getElementById('envYearOfDeliveryId9')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId9"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId9')).triggerHandler('change');

            //Adecuación y Recuperación de Sitios de Uso Temporal


            angular.element(document.getElementById('envYearOfDeliveryId10')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId10"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId10')).triggerHandler('change');

            //Manejo de Fauna y Flora


            angular.element(document.getElementById('envYearOfDeliveryId11')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId11"]').value = 'IFEB'

            angular.element(document.getElementById('envLaborSuitabilityId11')).triggerHandler('change');

            //Plan de Gestión Social


            angular.element(document.getElementById('envYearOfDeliveryId12')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId12"]').value = 'TSCA'

            angular.element(document.getElementById('envLaborSuitabilityId12')).triggerHandler('change');

            //capacitación de Personal


            angular.element(document.getElementById('envYearOfDeliveryId13')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId13"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId13')).triggerHandler('change');

            //Contratación de Mano de Obra no Calificada


            angular.element(document.getElementById('envYearOfDeliveryId14')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId14"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId14')).triggerHandler('change');

            //Rescate Arqueológico


            angular.element(document.getElementById('envYearOfDeliveryId15')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId15"]').value = 'ARQ'

            angular.element(document.getElementById('envLaborSuitabilityId15')).triggerHandler('change');

            //Manejo de Hundimientos


            angular.element(document.getElementById('envYearOfDeliveryId16')).triggerHandler('change');

            document.querySelector('[id="envLaborSuitabilityId16"]').value = 'MULT'

            angular.element(document.getElementById('envLaborSuitabilityId16')).triggerHandler('change');


        });

        // SELECCIÓN DE PROFESIONALES => CONTADOR(ES), GEÓLOGO(S), INGENIERO(S) GEÓLOGO(S), INGENIERO(S) DE MINAS
        // ==============================================================================
        console.log("INICIA LA SELECCIÓN DE LOS PROFESIONALES");
        console.log('================================================================');
        let profesionales = [
            { tipo: "Geólogo", nombres: ["OSCAR DARIO VILLADA AGUILAR (73002)"] },
            //  { tipo: "Ingeniero Geólogo", nombres: [""]},
            //  { tipo: "Ingeniero de Minas", nombres: [""]}
        ];

        await seleccionar_Profesional(profesionales, page, 1);

        // Hacer clic en el botón "Agregar"
        const addProfesional = await page.$x('//span[contains(.,"Agregar")]');
        await addProfesional[0].click();


        console.log('================================================================');
        console.log("FIN DE LA SELECCIÓN DE LOS PROFESIONALES");
        // =============================================================================

        // Acepta terminos y da clic en continuar
        await page.click('#technicalCheckboxId');
        const btnInfoEconomica = await page.$x('//a[contains(.,"Información eco")]');
        await btnInfoEconomica[0].click();

        // SELECCIÓN DEL CONTADOR
        // ==============================================================================
        console.log("INICIA LA SELECCIÓN DE CONTADOR(ES)");
        console.log('================================================================');
        let Contador_es = [
            { tipo: "Contador", nombres: ["LUIS FERNANDO VARGAS JULIO (93637)"] },
        ];

        await seleccionar_Profesional(Contador_es, page, 2);

        console.log('================================================================');
        console.log("FIN DE LA SELECCIÓN DE CONTADOR(ES)");
        // ==============================================================================

        // SELECCIÓN DE LOS VALORES
        // ==============================================================================
        await page.waitForSelector('#personClassificationId0');
        await page.select('#personClassificationId0', 'PJ');
        await page.evaluate(() => {


            // Check
            // document.querySelector('Input[id="declareIndId0"]').click();

            //Valores
            // document.getElementById('currentAssetId0').value = '42539369275' // OLD
            document.getElementById('activoCorrienteId0').value = '1850519000';

            angular.element(document.getElementById('activoCorrienteId0')).triggerHandler('change');

            // document.getElementById('currentLiabilitiesId0').value = '15184416062' // OLD
            document.getElementById('pasivoCorrienteId0').value = '373226000';

            angular.element(document.getElementById('pasivoCorrienteId0')).triggerHandler('change');

            // document.getElementById('totalAssetId0').value = '48322540755' // OLD
            document.getElementById('activoTotalId0').value = '56658435000';

            angular.element(document.getElementById('activoTotalId0')).triggerHandler('change');

            // document.getElementById('totalLiabilitiesId0').value = '15401226207' // OLD
            document.getElementById('pasivoTotalId0').value = '5247940000';

            angular.element(document.getElementById('pasivoTotalId0')).triggerHandler('change');
        });
        // ==============================================================================





        const continPag4 = await page.$x('//span[contains(.,"Continuar")]');
        await continPag4[1].click();
        // Esperar la navegación
        await page.waitForNavigation({
            waitUntil: 'networkidle0',
            // timeout: 2000 // Ajusta el timeout según tus necesidades
        });
        clearTimeout(RadiPrimero);
        let Radisegundo = setTimeout(() => {

            console.log("ENTRO EN EL Radisegundo");
            //page.close();
            Mineria(browser,  Pin);


        }, 30000);




        console.timeEnd('Deteccion a adjuntar');
        const btncenti = await page.$x('//a[contains(.,"Certificac")]');
        await btncenti[0].click();

        // await page.waitForTimeout(200);
        console.log("Vamos aca");

        // await page.waitForTimeout(200);


        await page.waitForSelector(`#p_CaaCataEnvMandatoryDocumentToAttachId0`);
        const RutaDelArchivoo = `C:\\Aplicaciones\\Documentos\\${Empresa}\\Sheips\\${IdArea}.zip`;
        const ElementoControladorDeCargaaa = await page.$(`#p_CaaCataEnvMandatoryDocumentToAttachId0`);
        await ElementoControladorDeCargaaa.uploadFile(RutaDelArchivoo);


        console.log("YA ESCRIBIO a");

        // await page.waitForTimeout(1000);

        try {

            
            let ArchivoAmbiental ;
            if(IdArea == '509188'){
                 ArchivoAmbiental = `C:\\Aplicaciones\\Documentos\\${Empresa}\\CertificadoAmbiental\\509188.pdf`;
            }else{
                 ArchivoAmbiental = `C:\\Aplicaciones\\Documentos\\${Empresa}\\CertificadoAmbiental\\Certificado_Ambiental.pdf`;

            }
            
            await page.waitForSelector(`#p_CaaCataEnvMandatoryDocumentToAttachId1`);
            const RutaDelArchivoo = ArchivoAmbiental;
            const ElementoControladorDeCargaaa = await page.$(`#p_CaaCataEnvMandatoryDocumentToAttachId1`);
            await ElementoControladorDeCargaaa.uploadFile(RutaDelArchivoo);



            // await page.waitForTimeout(300);
            await page.click('#acceptanceOfTermsId');
            console.log("Ahora Vamos aca 3333333");
            // await page.waitForTimeout(300);

            const btnDocuSopor = await page.$x('//a[contains(.,"Documentac")]');
            await btnDocuSopor[0].click();
            console.log("si llego");
            await page.waitForTimeout(300);


            console.log("INICIA PROCESO DE ADJUNTAR DOCUMENTOS REGLAMENTARIOS");
            console.log('================================================================');

            let Documentos = [
                "1. Aceptacion Del Profesional Para Refrendar Documentos Tecnicos.pdf",//1
                "2. Fotocopia Tarjeta Profesional.pdf",//2
                "4. Declaracion De Renta Proponente 1 Anio 1.pdf",//3
                "5. Declaracion De Renta Proponente 1 Anio 2.pdf",//4
                "6. Estados Financieros Propios Certificados Y O Dictaminados Proponente 1 Anio 1.pdf",//5
                "7. Estados Financieros Propios Certificados Y O Dictaminados Proponente 1 Anio 2.pdf",//6
                "8. Extractos Bancarios Proponente 1.pdf",//7
                "9. RUT.pdf",//8
                "10. Fotocopia Documento De Identificacion.pdf",//9
                "11. Certificado De Composicion Accionaria De La Sociedad.pdf",//10
                "12. Certificado De Existencia Y Representacion Legal.pdf",//11
                "13. Certificado Vigente De Antecedentes Disciplinarios.pdf",//12
                "14. Fotocopia Tarjeta Profesional Del Contador Revisor Fiscal.pdf",//13

            ];

            let ElementosFile = [
                "p_CaaCataMandatoryDocumentToAttachId0",//1
                "p_CaaCataMandatoryDocumentToAttachId1",//2
                "p_CaaCataMandatoryDocumentToAttachId3",//3
                "p_CaaCataMandatoryDocumentToAttachId4",//4
                "p_CaaCataMandatoryDocumentToAttachId5",//5
                "p_CaaCataMandatoryDocumentToAttachId6",//6
                "p_CaaCataMandatoryDocumentToAttachId7",//7
                "p_CaaCataMandatoryDocumentToAttachId8",//8
                "p_CaaCataMandatoryDocumentToAttachId9",//9
                "p_CaaCataMandatoryDocumentToAttachId10",//10
                  "p_CaaCataMandatoryDocumentToAttachId11",//11
                 "p_CaaCataMandatoryDocumentToAttachId12",//12
                "p_CaaCataMandatoryDocumentToAttachId13",//13
                // "p_CaaCataMandatoryDocumentToAttachId14"//14
            ];
                console.log(ElementosFile.length);
            try {
                for (let i = 0; i < ElementosFile.length; i++) {
                    try {
                        await page.waitForSelector(`#${ElementosFile[i]}`);
                        const RutaDelArchivo = `C:\\Aplicaciones\\Documentos\\${Empresa}\\DocumentosReglamentarios\\${Documentos[i]}`;
                        const ElementoControladorDeCarga = await page.$(`#${ElementosFile[i]}`);
                        await ElementoControladorDeCarga.uploadFile(RutaDelArchivo);

                        // Verificar si el archivo se cargó correctamente
                        console.log(`Archivo ${Documentos[i]} adjuntado correctamente.`);

                    } catch (error) {
                        console.log(`Error al cargar el archivo ${Documentos[i]}:`, error);

                        // Detener el bucle o manejar el error como sea necesario
                        throw new Error(`Error al cargar el archivo ${Documentos[i]}`);
                    }
                }
                console.log("sadas");
            } catch (error) {
                console.error('Error general al adjuntar archivos:', error);
            }

            console.log('================================================================');
            console.log('FINALIZA PROCESO DE ADJUNTAR DOCUMENTOS REGLAMENTARIOS');

            // await page.waitForTimeout(2000);

        } catch (error) {
            console.log('BOTO ERROR');
        }


        //CAPTURA DE PANTALLA
        await CapturaPantalla(page);
        const continPag = await page.$x('//span[contains(.,"Continuar")]');
        await continPag[1].click();
        await page.waitForNavigation({
            waitUntil: 'networkidle0',
        });
        console.log(" si navego ");



        //CAPTURA DE PANTALLA
        clearTimeout(Radisegundo);

        let RadiTercero = setTimeout(() => {

            console.log("ENTRO EN EL Radisegundo");
            //page.close();
            Mineria(browser,  Pin);
        }, 60000);



        const HacerClicEnSpanDocumentacionDeSoporte = await page.$x('//a[contains(.,"Documentac")]');
        await HacerClicEnSpanDocumentacionDeSoporte[0].click();
        const AparecioCaptcha = await page.waitForSelector('iframe[title="reCAPTCHA"]');
        if (AparecioCaptcha) {
            console.log("EL CAPTCHA YA ESTÁ DISPONIBLE");
            await page.waitForTimeout(500);
        } else {
            console.log("EL CAPTCHA NO ESTÁ DISPONIBLE");
        }

        for (let i = 0; i < 1; i+=1) {
            // await page.keyboard.press('Tab');
            await keyboard.pressKey(Key.Tab);
            console.log(`PRESIONÉ LA TABULADORA EN ITERACIÓN ${i}`);
        }

        await keyboard.pressKey(Key.Enter);

        // await page.waitForTimeout(1000000);


        while (true) {
            await page.waitForTimeout(1000);
            console.log("Chequeando si el captcha está resuelto...");

            const isCaptchaResolved = await page.evaluate(() => {
                const responseField = document.querySelector('#g-recaptcha-response');
                return responseField && responseField.value.length > 0;
            });

            if (isCaptchaResolved) {
                console.log('El captcha ha sido resuelto.');
                clearTimeout(RadiTercero);
                break;
            } else {
                console.log('El captcha no ha sido resuelto aún.');
            }
        }



        console.log('51. Bóton Radicar');

        const btnRadicar1 = await page.$x('//span[contains(.,"Radicar")]');
        console.log("Este es el boton radicar : " + btnRadicar1);

        //await page.waitForTimeout(4000);
        console.log("Le di click");

        try {
            await btnRadicar1[0].click();
        } catch (exepcion) {
            console.log("La pos 0 No fue ")
        }
        try {

            await btnRadicar1[1].click();
        } catch (exepcion) {
            console.log("La 1 tampoco Y_Y")
        }

        //CAPTURA DE PANTALLA
        await CapturaPantalla(page);
        //CORREO RADICACION
        Correo(2, IdArea, Celda);
        clearTimeout(Radisegundo);
        await page.waitForTimeout(180000);
        Mineria(browser,  Pin);







    })();
}


// FUNCIÓN PARA ENVÍO DE CORREO SEGÚN LA SITUACIÓN
function Correo(Tipo, Area, Celda) {
    // 1. Liberada 2. radicada 3. Fecha reapertura
    var msg = "";
    var Color = "";
    var Texto = "";
    //Area = "Tranquilos area de prueba";
    if (Tipo == 1) {
        msg = "¡¡¡Posible Area Liberada!!! " + EquipoActual + " " + Area + " " + Empresa;
        Color = "#4CAF50";
        Texto = "POSIBLE AREA LIBERADA";
    } else if (Tipo == 2) {
        msg = "¡¡¡Posible Area Radicada!!! " + EquipoActual + " " + Area + " " + Empresa;
        Color = "#D4AF37";
        Texto = "POSIBLE AREA RADICADA";
    } else if (Tipo == 3) {
        msg = "¡¡¡Area Con fecha de Reapertura!!! " + EquipoActual + " " + Area + " " + Empresa;
        Color = "#2196F3";
        Texto = "AREA CON REAPERTURA";
    } else if (Tipo == 4) {
        msg = Area + " " + Empresa + " ¡¡¡Verificar!!!!.";
    }else if ( Tipo == 5){
        msg = "¡¡¡Ojo Pestañas!!! " + EquipoActual ;
        Color = "#fe1426";
        Texto = "Pestañas";
    }

    var nodemailer = require('nodemailer');

    var transporter = nodemailer.createTransport({
        host: "mail.ceere.net", // hostname
        secureConnection: false,
        port: 465,
        tls: {
            ciphers: 'SSLv3'
        },
        auth: {
            user: 'correomineria2@ceere.net',
            pass: '1998Ceere*'
        }
    });
    var mensaje = msg;
    var mailOptions = {
        from: msg + '"Ceere" <correomineria2@ceere.net>', //Deje eso quieto Outlook porne demasiados problemas 
        to: 'jorgecalle@hotmail.com, jorgecaller@gmail.com, alexisaza@hotmail.com, camilodesarrollador@outlook.com, ceereweb@gmail.com, Fernando.pala.99@gmail.com, soportee4@gmail.com, soporte.ceere06068@gmail.com',
        //to: '  Fernando.pala.99@gmail.com',
        subject: 'LA AREA ES-> ' + Area,
        text: 'LA AREA ES->  ' + Area + "  " + Celda,
        html: `
            <html>
                <head>
                    <style>
                        .container {
                            font-family: Arial, sans-serif;
                            max-width: 600px;
                            margin: auto;
                            padding: 20px;
                            border: 1px solid #ddd;
                            border-radius: 5px;
                            background-color: #f9f9f9;
                        }
                        .header {
                            background-color: ${Color};
                            color: white;
                            padding: 10px;
                            text-align: center;
                            border-radius: 5px 5px 0 0;
                        }
                        .content {
                            margin: 20px 0;
                        }
                        .footer {
                            text-align: center;
                            padding: 10px;
                            font-size: 12px;
                            color: #777;
                            border-top: 1px solid #ddd;
                        }
                    </style>
                </head>
                <body>
                    <div class="container">
                        <div class="header">
                            <h3> ${Texto} </h3>
                        </div>
                        <div class="content">
                            <p><strong>Detalles:</strong></p>
                            <ul>
                                <li><strong>Empresa: </strong><br>${Empresa}</li>
                                <li><strong>Area:</strong><br>${Area}</li>
                                <li><strong>Celda:</strong><br>${Celda}</li>
                            <li><strong>Equipo Actual:</strong><br>${EquipoActual}</li>
                            </ul>
                        </div>
                        <div class="footer">
                            <p>Creado por Ceere Software - © 2024 Todos los derechos reservados</p>
                        </div>
                    </div>
                </body>
            </html>
        `
    };

    transporter.sendMail(mailOptions, function (error, info) {
        if (error) {
            return console.log(error);
        }

        console.log('Message sent: ' + info.response);
    });
}

// FUNCIÓN PARA LA CAPTURA DE PANTALLA AL MOMENTO DE LA RADICACIÓN
async function CapturaPantalla(page) {

    const FechaGeneral = new Date();

    let Dia = FechaGeneral.getDate();
    let Mes = FechaGeneral.getMonth();
    let Anio = FechaGeneral.getFullYear();
    let Hora = FechaGeneral.getHours();
    let Minuto = FechaGeneral.getMinutes();
    let Segundo = FechaGeneral.getSeconds();
    let DiaFinal, MesFinal, HoraFinal, MinutoFinal, SegundoFinal;

    Mes = Mes + 1; // PORQUE COMIENZA EN 0 Y TERMNA EN 11, POR ESTA REZÓN SE LE SUMA 1, PARA QUE QUEDE EN EL MES ACTUAL
    DiaFinal = Dia < 10 ? '0' + Dia : Dia;
    MesFinal = Mes < 10 ? '0' + Mes : Mes;
    HoraFinal = Hora < 10 ? '0' + Hora : Hora;
    MinutoFinal = Minuto < 10 ? '0' + Minuto : Minuto;
    SegundoFinal = Segundo < 10 ? '0' + Segundo : Segundo;

    let Fecha = `${DiaFinal}-${MesFinal}-${Anio} --- ${HoraFinal}-${MinutoFinal}-${SegundoFinal}`;

    const { mkdir, access } = require('fs/promises');

    let NombreCarpeta = "ScreenShots";
    let pathProduccion = `C:\\Aplicaciones\\${NombreCarpeta}`;

    try {
        // Verificar si la carpeta ya existe
        await access(pathProduccion);
        console.log(`La carpeta ${NombreCarpeta} ya existe en la dirección ${pathProduccion}`);
    } catch (error) {
        // Si no existe, crearla
        await mkdir(pathProduccion);
        console.log(`La carpeta fue creada en la dirección ${pathProduccion} con el nombre ${NombreCarpeta}`);
    }

    await page.screenshot({ path: `C:\\Aplicaciones\\ScreenShots\\Imagen Tomada El ${Fecha}.png`, type: 'png' })
    console.log("El ScreenShot fue guardado");
}


async function seleccionar_Profesional(profesionales, page, Tipo) {
    for (const profesional of profesionales) {
        const tipoProfesional = profesional.tipo;
        const nombres = profesional.nombres;
        let selectTipoProfesion;
        let addProfesional;
        // Seleccionar el tipo de profesional en el primer select
        if (Tipo == 1) {
            selectTipoProfesion = await page.$('select[id="techProfessionalDesignationId"]');
        } else {
            selectTipoProfesion = await page.$('select[id="ecoProfessionalDesignationId"]');
        }

        await selectTipoProfesion.type(tipoProfesional);

        // Iterar sobre los nombres y seleccionar cada uno en el segundo select
        for (const nombre of nombres) {
            console.log("Tipo Profesional: " + tipoProfesional + " - " + "Nombres: " + "(" + nombre + ")");
            let selectProfesional;
            if (Tipo == 1) {
                selectProfesional = await page.$('select[id="techApplicantNameId"]');
            } else {
                selectProfesional = await page.$('select[id="ecoApplicantNameId"]');
            }


            await selectProfesional.type(nombre);
            // Hacer clic en el botón "Agregar"

            await page.waitForTimeout(100); // Esperar 100 milisegundos

            addProfesional = await page.$x('//span[contains(.,"Agregar")]');
            if (Tipo == 1) {
                await addProfesional[0].click();

            } else {
                try {
                    await addProfesional[0].click();
                } catch (error) {
                    console.log("ERR 0");
                    console.log (`Bro manito sabe que  pilke -> ${error}`)
                }
                try {
                    await addProfesional[1].click();
                } catch (error) {
                    console.log("ERR 1");
                    console.log (`Bro manito sabe que  pilke -> ${error}`)
                }
                try {
                    await addProfesional[2].click();

                } catch (error) {
                    console.log("ERR 2");
                    console.log (`Bro manito sabe que  pilke -> ${error}`)
                }
                try {

                    await addProfesional[3].click();
                } catch (error) {
                    console.log("ERR 3");
                    console.log (`Bro manito sabe que  pilke -> ${error}`)
                }
                try {

                    await addProfesional[4].click();
                } catch (error) {
                    console.log("ERR 4");
                    console.log (`Bro manito sabe que  pilke -> ${error}`)
                }
            }

        }
    }
}

var CorreoEnviado = false;
var PrimerCorreoEnviado = false;
// FUNCIÓN PARA VERIFICAR VENCIMIENTO DE PIN Y ENVIAR RECORDATORIO
function VerificarVencimientoPin(selectedText, TextoDeOpcionSeleccionadaEnCampoPin) {

    const input = TextoDeOpcionSeleccionadaEnCampoPin;

    // Separar la fecha después de la coma
    const dateString = input.split(',')[1].trim();

    // Crear un objeto de fecha a partir de la cadena
    const targetDate = new Date(dateString);

    // Obtener la fecha actual
    const currentDate = new Date();

    // Calcular la diferencia en milisegundos
    const diffInMs = targetDate - currentDate;

    // Convertir la diferencia en días
    const diffInDays = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));

    const diaSemana = targetDate.toLocaleString('es-Es', { weekday: 'long' });
    console.log(`¡¡¡ DIFERENCIA EN DÍAS PIN: ${diffInDays}`);
    const Description = `El pin vence en ${diffInDays} días, es decir, tiene vigencia hasta el día ${diaSemana} - ${dateString}`;

    // Se captura la hora del día actual
    const HoraActual = currentDate.getHours();

    // Se captura el minuto actual
    const MinutoActual = currentDate.getMinutes();

    // Se captura el segundo actual
    const SegundoActual = currentDate.getSeconds();

    // Se verifica si la diferencia de días es igual a 5 y si la hora actual contiene 7 de la mañana ó contiene 3 de la tarde. Para hacer 2 envíos de recordatorio el día que se cumplan todas las condiciones

    // Primer envío: 07:00 am
    if ((diffInDays === 5) && ([7].includes(HoraActual)) && (MinutoActual === 0) && (CorreoEnviado === false) && !PrimerCorreoEnviado) {
        console.log("TODAS LAS CONDICIONES SE CUMPLIERON, SE ENVIARÁ EL PRIMER CORREO RECORDANDO EL VENCIMIENTO DEL PIN SELECCIONADO...");
        Correo(4, selectedText, Description);
        CorreoEnviado = true;
        PrimerCorreoEnviado = true;
    }

    // Resetear el flag solo una vez después del primer correo
    if ((diffInDays === 5) && ((HoraActual > 7) && (HoraActual < 15)) && (MinutoActual === 0) && PrimerCorreoEnviado && CorreoEnviado) {
        CorreoEnviado = false;
        console.log("LA VARIABLE DE CORREO ENVIADO SE HIZO FALSA");
    }

    // Segundo envío: 03:00 pm
    if ((diffInDays === 5) && ([15].includes(HoraActual)) && (MinutoActual === 0) && (CorreoEnviado === false)) {
        console.log("TODAS LAS CONDICIONES SE CUMPLIERON, SE ENVIARÁ EL SEGUNDO CORREO RECORDANDO EL VENCIMIENTO DEL PIN SELECCIONADO...");
        Correo(4, selectedText, Description);
        CorreoEnviado = true;
        PrimerCorreoEnviado = false;
    }
}